{
  "ConfigUrl": [
    {
      "key": "_information",
      "completeAPI": "View all URL <a href='/api/#category_ConfigUrl'>API here</a>.",
      "description": "These options are defined in query url, and can configure tools and view settings.\nUsage (IN LINK URL): <a target='_blank' href='https://maps.csr.ufmg.br/editor/?lang=eng&map=&queryid=78&extent=&tools=helpintro,layerchooser,zoomextent,customzoom,getfeature,hovershowlegend&options=scale,startopened,hidestylechooser,enablequeries&visiblelayers=1000'>https://maps.csr.ufmg.br/editor/?lang=eng&map=&queryid=78&extent=&tools=helpintro,layerchooser,zoomextent,customzoom,getfeature,hovershowlegend&options=scale,startopened,hidestylechooser,enablequeries&visiblelayers=1000</a>",
      "name": "URL Parameters"
    },
    {
      "key": "visibleLayers",
      "description": "Define the initially visible layers.",
      "type": "Number",
      "examples": [
        "visibleLayers < 0  // Lower than zero: shows the first defined maps as visible (From top to bottom).\r visibleLayers > 0 // Higher than zero: shows the last defined maps as visible (From bottom to top).\r visibleLayers = 0 // Start with no layer visible.\r visibleLayers = 'custom' // Visibility defined in each map by 'visibility: {Boolean}' property.\r visibleLayers = null // No limit of visible layers."
      ],
      "default": "100"
    }
  ],
  "GroupingMaps": [
    {
      "key": "_information",
      "description": "Defines groups of {ConfigLayers}, each layer in the same group is shown under the same sub-menu. A group of layers is defined by an array of one Group definition followed by his inside layers declarations as: [{GroupingMaps{title, color}}, {ConfigLayer}, ...].\nGroupingMaps.title: {String} Title of the group of maps\nGroupingMaps.color: {String} RGB string content.\nUsage: [{title: \"Prodes Group\", color: \"#8F7C7C\"}, {name:'CSR:prodes', source:'local'}] ",
      "name": "Grouping maps"
    }
  ],
  "ConfigLayer": [
    {
      "key": "_information",
      "completeAPI": "View all layer configuration <a href='/api/#category_ConfigLayer'>API here</a>.",
      "description": "Configurable exhibition of each map, defining interactions, possible internal maps and applied calculations among them.",
      "name": "Layer properties configuration"
    },
    {
      "key": "getLayerLegend",
      "description": "Get the associated layer legend content by its index.\r\rPS: The legend format is the same as expected by the composedLayer.setCalculateLegend function.\rUsage:this.setCalculateLegend(ExtjsUtils.Layer.getLayerLegend(composedLayer, 0));/n@param composedLayer {OpenLayers.Layer.Composed} Layer composed./n@param index {Numeric} Index of the inside layer.",
      "type": "function(composedLayer, index) : Array"
    },
    {
      "key": "functions",
      "description": "Allows to create custom functions on the context of each layer. These functions can be used in any tool callbacks, in the tool callback must use the same name in this 'functions' property.\nPS1: Functions only visible inside this layer.\nPS2: Functions accessed by tools callbacks using his property name as:  (this.functions.['onClick']) to refer the following onClick function:\nfunctions: {\n  onClick: function() {\n    ExtjsUtils.ALERTIFY.log(\"Clicked Button\");\n  }\n}",
      "type": "Array|null"
    },
    {
      "key": "extents",
      "description": "Override the map extents with a custom one.\rExtents must be in EPSG:4326 (coordinates in lat,long) array: [minX, minY, maxX, maxY]\r\rPS: All tiles within area will be requested.",
      "type": "Array",
      "examples": [
        "[-180.0000, -90.0000, 180.0000, 90.0000] for full world."
      ]
    },
    {
      "key": "legendColor",
      "description": "Function to treat the color associated to each value/category.\r\rPS: This function callback is called in layer context./n@param color {Array} Three numbers (0 to 255) to define the RGB color./n@param inputs {Array} Array of widgets./n@param lastValue {String} Last maximum title./n@param currentValue {String} Current maximum title./n@param ruleIndex {Numeric} Rule input index.",
      "type": "function",
      "examples": [
        "{\r     ...,\r     legendColor: function(color, inputs, lastValue, currentValue, ruleIndex) {\r         return [0,0,0];\r     },\r     ...\r}"
      ]
    },
    {
      "key": "onInputsReady",
      "description": "Callback function called after all inputs ready and loaded.\r\rPS: Its called even when the map is listed but not showing./n@param inputs {Object} Inputs defined to interact with the map.",
      "type": "function",
      "examples": [
        "{\r    ...,\r    onInputsReady: function (inputs) {\r         console.table(inputs);\r         console.log(\"All inputs are ready and loaded!\");\r    },\r    ...\r}"
      ]
    },
    {
      "key": "insideOpacity",
      "description": "Set the inside layers opacity Array of 0~1 values one per layer.",
      "type": "Array.<Numeric>",
      "examples": [
        "{\r     ...,\r     insideOpacity: [1.0, 0.1, 0.5],\r     ...\r}"
      ],
      "default": "[1, 1, 1, ...]"
    },
    {
      "key": "maxZoom",
      "description": "Limits the real max zoom of a given layer. (When map zoom exceed this, the image is reused and is stretched)",
      "type": "Numeric"
    },
    {
      "key": "type",
      "description": "Use as data source in any of supported types: 'load', 'csv', 'json' or 'default'.\r'load': Function to use as callback on 'loadData' property. The user is responsible for load data directly on layer.\r'csv': Url address to load csv file from.\r'json': Json data directly itself.\r'jsonurl': Url address to load json from",
      "type": "String",
      "default": "\"json\""
    },
    {
      "key": "loadGeojson",
      "description": "Função para carregar geojson pra desenhar no layer",
      "type": "function()"
    },
    {
      "key": "popupCallback",
      "description": "Function on popup. on callback param.\r(attributes, inputs)\rScope in layer./n@param attributes {Array} undefined/n@param inputs {Array} undefined",
      "type": "function",
      "examples": [
        "{\r     ...,\r     popupCallback: function (attributes, inputs) {\r\r     },\r     ...\r}"
      ]
    },
    {
      "key": "hideLegendButton",
      "description": "True to hide the subtittles container.",
      "type": "boolean"
    },
    {
      "key": "toggleHandler",
      "description": "Handler is the callback when the ToggleButton is clicked.\nOverwrite to call a custom function.\n\nPS: Using custom function ignore the associatedButtonID \"It doesnt have to even exists\".",
      "type": "function()",
      "examples": [
        "{name:'LAYER_NAME',\n    paramsButtonConfig:[{\n      associatedButtonID: 'ignore',\n      enableToggle: false,\n      toggleHandler: function(btn, state) {\n        alert(\"BTN Clicked\" + btn + \" toggleState: \" + state);\n      }\n    }]\n  }]"
      ]
    },
    {
      "key": "handler",
      "description": "Handler is the callback when the button is clicked.\nOverwrite to call a custom function.\n\nPS: Using custom function ignore the associatedButtonID \"It doesnt have to even exists\".",
      "type": "function()",
      "examples": [
        "{name:'LAYER_NAME',\n    paramsButtonConfig:[{\n      associatedButtonID: 'ignore',\n      enableToggle: false,\n      handler: function(btn) {\n        alert(\"BTN Clicked\" + btn);\n      }\n    }]\n  }]"
      ]
    },
    {
      "key": "paramsButtonConfig",
      "description": "Define custom buttons to be shown on the layer representation.\n\nThere are multiple types of buttons, there are some commum properties and some special properties:\n\nCommom properties:\n{\n  iconCls: {String} The class to add on the button. Ex: \"icon-timeline-slider\"\n  pressed: {Boolean} True to indicate if the button starts pressed, False otherwise. Ex: true,\n  toggleGroup: {String} Identify a group by name where only one button of the group can be pressed. Ex: 'onlyOneAtTime'\n}\n\n\nTypes:\nassociated: {associatedButtonID: 'ANOTHER_BUTTON_ID', type: 'associated'}\n Treat the layer button and the associated as the same button, so no matter which one is clicked both will\n  receive the click event.\nquery: {type: 'query'}\n This configuration allows the user to change the default query button behavior overriting his definition.\ndownload: {type: 'download', layerIndex: 0}\n Set what layer should be downloaded when more than one layer is shown by its internal layer index.\nmetadata: {type: 'metadata', layerIndex: 0}\n Set the metadata button to show one of the inside composite layer by his index.\n\n\nPS: The layerIndex is from 0 to the quantity of layers in a composed map.\nPS2: The properties are aditional, so the common must always be present, and for each type his\n corresponding property must be added.",
      "type": "Object",
      "examples": [
        "{\n     ...,\n     paramsButtonConfig: {\n          associatedButtonID: \"button-02\",\n          iconCls: \"icon-timeline-slider\",\n          pressed: true,\n          toggleGroup: undefined\n     },\n     ...\n}"
      ]
    },
    {
      "key": "thumbUrl",
      "description": "Custom thumbnail URL, allows change the thumbnail of the map.",
      "type": "String"
    },
    {
      "key": "startLegendOpen",
      "description": "Show layer with it legend container opened.",
      "type": "Boolean"
    },
    {
      "key": "onClickViewGroup",
      "description": "Layer configuration to use layer group click callback.\r\rPS: Function executed in the node context.\rPS2: this.expanded True when its openned False otherwise.",
      "type": "function"
    },
    {
      "key": "onToggleViewGroup",
      "description": "Layer property to use the group toggle callback.\r\rPS: Function executed in the node context.\rPS2: this.expanded True when its openned False otherwise.",
      "type": "function"
    },
    {
      "key": "openGroup",
      "description": "Define the group initial status.\r\rTrue to start expanded False otherwise.",
      "type": "Boolean"
    },
    {
      "key": "hideListing",
      "description": "True to does not list this layer on the top menu, False otherwise.",
      "type": "Boolean"
    },
    {
      "key": "closedGroup",
      "description": "Defines a group that will not be initially open.",
      "type": "Boolean"
    }
  ],
  "LayerInternal": [
    {
      "key": "_information",
      "completeAPI": "View all layer internal helper functions <a href='/api/#category_LayerInternal'>API here</a>.",
      "description": "Functions to manipulate a composed map layers from inside, like what maps are composing or what legend will be applied.",
      "name": "Layer internal functions"
    },
    {
      "key": "otherNames",
      "description": "Define adittional maps to be available for the query, wich will be listed in the filtered stored capabilities.\r\rPS: This property is to use along with the 'capabilities' option, wich filter the GetCapabilities cache only the maps in use. (Performance Optimization, faster loading).",
      "type": "String",
      "examples": [
        "{\r     name: \"CSR:estados,CSR:airports\",\r     otherNames: \"CSR:municipios,CSR:rodovias\",\r     beforeCalc: function(layerVals, inputVals) {\r         this.changeLayers([{name: 'CSR:municipios', styles: fMapName + \"_1\", index: 0},\r             {name: 'CSR:rodovias', styles: 'rodovias_1', index: 1}]);\r     }\r  }\r\r  Change layer needs the definition of the 4 maps: 'estados', 'airports', 'municipios' and 'rodovias'. If the othernames is not defined only the maps at 'name' property will be available and the changeLayers for 'municipios' and 'rodovias' will not know about these maps.\r  PS: (This issue only works outside of the editor because editor never use the filtered GetCapabilities response.)"
      ]
    },
    {
      "key": "changeLayers",
      "description": "Change a internal layer in a given index by another.\r\rPS: Its highly recommended to pass multiple configuration in a array, avoid call this function multiple\r times in the same callback./n@param newConfig {Array|Object} One or more layers configurations with a property 'index' indicating the replacing layer.\r Each config object must contain at least the following properties:\r  [{name: 'MAP_FULL_NAME', styles: 'MAP_STYLE', index: 'MAP_INDEX_TO_CHANGE'}, ... ]/n@param force {Boolean} Force redraw even if no change is done when the layer is the same.",
      "type": "function(newConfig, force)"
    }
  ],
  "Button": [
    {
      "key": "_information",
      "completeAPI": "This button is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.Button' target='_blank'>Button.Configs</a>.\nOnly some properties are listed in <a href='/api/#category_Button'>API here</a>.",
      "description": "Create a simple button to user interact with the map.",
      "name": "Button widget"
    },
    {
      "key": "handler",
      "description": "Function call on button click (when toggle disabled)./n@param btn {Ext.Button} The button element clicked./n@param clickEvt {EventObject} The click event.",
      "type": "function",
      "examples": [
        "|handler = function (btn, evt){\r console.log(btn, evt);\r}|"
      ]
    },
    {
      "key": "text",
      "description": "Button text.",
      "type": "String",
      "examples": [
        "|text=Click On Me|"
      ]
    },
    {
      "key": "fieldLabel",
      "description": "Button label.",
      "type": "String",
      "examples": [
        "|fieldLabel=A button|"
      ]
    },
    {
      "key": "pressed",
      "description": "Button state. True to start pressed (only if enableToggle = true)",
      "type": "Boolean",
      "examples": [
        "|pressed=true|"
      ],
      "default": "false"
    },
    {
      "key": "enableToggle",
      "description": "Button type, true to toggle false otherwise.\r\rWhen true the callback called is toggleHandler, otherwise the handler is called.",
      "type": "Boolean",
      "examples": [
        "|enableToggle=true|"
      ],
      "default": "false"
    },
    {
      "key": "hideButton",
      "description": "HideButton Query.hidebutton",
      "type": "boolean",
      "examples": [
        "{name:'LAYER_NAME',\n    paramsButtonConfig:[{\n      type: \"query\",\n      hideButton: true,\n      hideBottomButton: true\n    }]\n  }]"
      ]
    }
  ],
  "Combobox": [
    {
      "key": "_information",
      "completeAPI": "This button is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.ComboBox' target='_blank'>Ext.form.ComboBox</a> for customized properties click on <a href='/api/#category_Combobox'>API here</a>.",
      "description": "It creates an input of ComboBox tool where the value is selectable from a list.\nUsage: '\\{\\combobox\\}\\}' or <a href='/elements/combobox-widget/'>examples</a>.",
      "name": "Combobox widget"
    }
  ],
  "Hoverpixel": [
    {
      "key": "_information",
      "completeAPI": "View the complete HoverPixel <a href='/api/#category_Hoverpixel'>API here</a>.",
      "description": "Create a tool to instantly inspect pixel under mouse. The value of the map can also be used as input for another functions.\nUsage: \\{\\{hoverpixel\\}\\}",
      "name": "HoverPixel tool"
    },
    {
      "key": "checked",
      "description": "True to start the hoverPixel enable, false otherwise.",
      "type": "Boolean",
      "examples": [
        "|checked = true|"
      ],
      "default": "false"
    }
  ],
  "TooltipHelper": [
    {
      "key": "_information",
      "completeAPI": "View the complete TooltipHelper <a href='/api/#category_TooltipHelper'>API here</a>.",
      "description": "Functions to create tooltips on elements, at fixed positions and at mouse events.\nUsage: ExtjsUtils.TooltipHelper",
      "name": "Tooltip helper"
    }
  ],
  "Extjs": [
    {
      "key": "_information",
      "completeAPI": "View the full <a target='_blank' href=\"https://docs.sencha.com/extjs/3.4.0\">Extjs API 3.4 click here</a>.\n*Only the functions which where used in CSR projects are listed <a href='/api/#category_Extjs'>here</a>.",
      "description": "Calling core Extjs functions allows fine control over the CSR Maps internal elements.",
      "name": "Extjs 3.4"
    },
    {
      "key": "getHighchartById",
      "description": "Get the hichart by its DOM id./n@param id {String} Id of the highchart.",
      "type": "function(id) : Object",
      "examples": [
        "Extjs.getHighchartById(\"highchart-01\");"
      ]
    }
  ],
  "Alertify": [
    {
      "key": "_information",
      "completeAPI": "View the complete Alertify <a href='/api/#category_Alertify'>API here</a>.",
      "description": "Functions to help showing dialog informations to users.",
      "name": "Alertify dialogs"
    },
    {
      "key": "log",
      "description": "Shows an user notification (if enabled).\r\rPS: The messages before layer loading are delayed, when it finishes only the last message will be shown./n@param msg {String} Notification HTML content./n@param config {Object} Message configuration parameters.\r {force: {Boolean} Force to show notification even when disabled.\r  func: {Callback} Callback function when the notification is clicked.\r  onlyMsg: {Boolean} True to only show message and hide the close and the stop notifications, False otherwise.\r  delay: {Numeric} Amout of time in milisseconds before the message hide.\r  spamTime: {Numeric} Time the same message to be shown again is considered spam. (even with force = true).\r }",
      "type": "function(msg, config)"
    },
    {
      "key": "alert",
      "description": "Shows an user non blocking alert.\r\rPS: If layer is loading only the last message will be shown after load end./n@param msg {String} Notification HTML content.",
      "type": "function(msg)"
    }
  ],
  "InputManager": [
    {
      "key": "_information",
      "completeAPI": "View the complete InputManager <a href='/api/#category_InputManager'>API here</a>.",
      "description": "Tool to store local variables to be used in others functions callbacks.\nPS: DOM elements cannot be used in 'expression' context, because them cannot be sent to WebWorkers (javascript language limitation).\nUsage: '\\{\\{inputmanager\\}\\}'",
      "name": "InputManager tool"
    }
  ],
  "RawMaps": [
    {
      "key": "_information",
      "completeAPI": "View the complete Raw Maps <a href='/api/#category_RawMaps'>API here</a>.",
      "description": "The Raw Maps are some maps that are sent with each pixel value and not a RGBA color. All the manipulations are at most with integer or float precision so the colors must be applied on the client, after some calculation to, on the client, create each cell color value.",
      "name": "Web Raw Maps"
    },
    {
      "key": "description",
      "description": "Raw Maps operations:\r\r'normal' (NORMAL): A normal map is a map with each cell representing a legend/color and aren't a RAW Maps type.\r'raw' (RAW): Each cell in resulting map has the value of ther most centered cell in aggregated region.\r'rgba' (RGBA): Each cell in resulting map has a integer value representing the RGBA composition.\r  PS: Tanto o resultado como o input são inteiros representando valores RGBA.\r'sum' (SUM): Each resulting cell is the weighted sum of cells in the covering region.\r  PS: The weight used is the proportion of the covered area against the total area of the cell i.e. VALUE * COVERED_PERCENTAGE.\r'average' (AVERAGE): Each cell is the resulting of the weighted mean of cell in the covered region.\r  i.e. Sum(A) / Sum(B) : A is CELL_VALUE * COVERED_PROPORTION, B is COVERED_PROPORTION.\r  Example: A full covered cell the COVERED_PROPORTION is 1, and the half covered cell the proportion is 0.5 .\r'max' (MAX): Each resulting cell is the greater cell that is at least partially covered in the given region.\r'min' (MIN): Each resulting cell is the smaller cell that is at least partially covered in the given region.\r'integral' (INTEGRAL): A technique that allows to calculate the sum in a region just inspecting the cells on the\r  boundaries of a retangular area i.e. calculate sum in a region using only 4 points.\r'areaintegral' (AREAINTEGRAL): ?\r'area' (AREA): Each cell carry the original map area in the aggregated region.\r  ?PS: Esse simplificador agrupa as áreas do mapa original e permite avialiar a área do mapa minimizando erros de\r   calculos de área causados pela reprojeção uma vez q a própria célula armazena esse valor.\r'cells' (CELLS): Weighted sum of the cell quantity in a given region.",
      "type": "Object"
    }
  ],
  "QUERY": [
    {
      "key": "_information",
      "completeAPI": "View the complete Query <a href='/api/#category_QUERY'>API here</a>.",
      "description": "Defines a set of query helper functions.",
      "name": "Query utils"
    },
    {
      "key": "setQueryGlobalProperties",
      "description": "Function to add custom remote servers./n@param wmsDefinitions {Object} A object with all custom WMS definitions.\r The object could contain the following properties:\r *url: {String} Url of the source (Mandatory).\r ?cors: {Boolean} True to accept (Cross Domain Request Security) CORS for servers without permission, False otherwise.\r ?updateWMS: {Boolean} True to purge the WMS cache and get the updated content, False otherwise. (Usefull to avoid long waitings)\r ?storage: {String} Name of the storage service, supported services so far: 'github'.\r Storage type tips:\r     'github': The Github contenct directly.\r     'jsdelivr': The jsDelivr cache the results to force a instantly update the user could use different release version.\r         Tutorial about creating releases: https://help.github.com/en/articles/creating-releases\r         After creating the user could append @VERSION_NUMBER to the URL to force updating the map cache./n@param QUERY_DESCRIPTION {ConfigLayer} Array Array of layers in the query.\rUsage: ExtjsUtils.QUERY.setQueryGlobalProperties({globalCount: 0}) && QUERY_DESCRIPTION",
      "type": "function(wmsDefinitions, QUERY_DESCRIPTION) : boolean"
    },
    {
      "key": "setQueryGlobalProperties",
      "description": "A function that allows to define custom global functions that can be used in order to define properties or even inside the functions callbacks.\rPS: All properties defined here are added to the global scope and are removed when the query is changed./n@param globalProperties {Object} Object The object that all his functions will became globals, each property can be a value or a object or evan a function./n@param QUERY_DESCRIPTION {ConfigLayer} Array Array of layers in the query.\rUsage: ExtjsUtils.QUERY.setQueryGlobalProperties({globalCount: 0}) && QUERY_DESCRIPTION",
      "type": "function(globalProperties, QUERY_DESCRIPTION) : bool"
    },
    {
      "key": "onExternalMessage",
      "description": "its a window message",
      "type": "function()"
    }
  ],
  "MappiaIO": [
    {
      "key": "_information",
      "completeAPI": "Library to send events between Mappia Iframe and your site.\nIt allows to send events, like: on scroll change visible maps, or click on some links zoom to some region, and any other interaction with the events of your site. Use this library in your site include <a target='_blank' href='http://maps.csr.ufmg.br/theme/app/data/mappia_io.js'>&lt;script type=\"text/javascript\" src=\"//csr.ufmg.br/imagery/mappia_io.js\"&gt;&lt;/script&gt;</a>.",
      "description": "Library to send events between Mappia Iframe and your site.",
      "name": "MappiaIO"
    },
    {
      "key": "postMessage",
      "description": "Send message to parent Window. ( Compatible with MappiaIO library )\rAllows communication between iframe and parent window./n@param jsStr {Object|String} Object to be sent from inside iframe to parent MappiaIO.",
      "type": "function(jsStr)",
      "examples": [
        "ExtjsUtils.QUERY.postMessage({a:1,b:2})"
      ]
    }
  ],
  "GEOJSON": [
    {
      "key": "_information",
      "description": "Functions to handle GEOJSON transformations.",
      "name": "GEOJSON Utils"
    },
    {
      "key": "shapefile2GeojsonAsync",
      "description": "Parse shapefile to compatible Layer features.\rDBF file is optional.\r\rPS:ParamOptions\r  {\r  callback: {Function} 'Callback function with parsed shapefile' function(layer, parsedGeojson, orinalData),\r  fromProj: {String?} 'Projection name.' (EPSG:4326 or EPSG:900913),\r  dbf: (Optional?)'DBF file to load along with shapefile.',\r  limitCount: (Optional?)'Limit the amount of processed geometries'\r  }/n@param shpFile {File} Shapefile content (Needs to be in projection EPSG:4326 or EPSG:900913./n@param paramOptions {ParamOptions} Additional configuration for handling shapefile.\rParamOptions\r  {\r  callback: {Function} 'Callback function with parsed shapefile' function(layer, parsedGeojson, orinalData),\r  fromProj: {String?} 'Projection name.' (EPSG:4326 or EPSG:900913),\r  dbf: (Optional?)'DBF file to load along with shapefile.',\r  limitCount: (Optional?)'Limit the amount of processed geometries'\r  }",
      "type": "function(shpFile, paramOptions)"
    }
  ],
  "FileField": [
    {
      "key": "_information",
      "completeAPI": "View all FileField documentation <a href='/api/#category_FileField'>API here</a>.",
      "description": "Tool to handle and load local files.\nPS: This object cannot be sent to 'expression'.\nUsage: \\{\\{filefield|fieldLabel=loadshp|id=loadshp|_onChange=function(){alert('changed')}\\}\\}",
      "name": "FileField Widget"
    },
    {
      "key": "ignoreUpdate",
      "description": "Ignore the widget change event ( False to dispatch update event at every file selection )",
      "type": "Boolean"
    },
    {
      "key": "eventNames",
      "description": "List of events by name, use this property to define callback functions to any of the following events.",
      "type": "Array.<string>",
      "examples": [
        "['added', 'afterrender', 'beforedestroy', 'beforehide', 'beforerender', 'beforeshow', 'beforestaterestore',\r'beforestatesave', 'blur', 'change', 'destroy', 'disable', 'enable', 'focus', 'hide', 'invalid', 'move', 'removed', 'render',\r'resize', 'show', 'specialkey', 'staterestore', 'statesave', 'valid']"
      ]
    }
  ],
  "VectorLayer": [
    {
      "key": "_information",
      "completeAPI": "View complete VectorLayer documentation <a href='/api/#category_VectorLayer'>API here</a>.",
      "description": "Vector Layer configuration.",
      "name": "VectorLayer configuration"
    },
    {
      "key": "onLoad",
      "description": "Callback function after the layer is loaded or added to map.\rPS: Callback called on layer Context function(widgetValues)",
      "type": "function"
    },
    {
      "key": "popupTemplate",
      "description": "Function on popup. on callback param.",
      "type": "String",
      "examples": [
        "<a target=\"_blank\" href=\"{link}\">{description}</a>"
      ]
    },
    {
      "key": "popupCallback",
      "description": "Function on popup. on callback param.\r(attributes, inputs)\rScope in layer./n@param attributes {Array} undefined/n@param inputs {Array} undefined",
      "type": "function",
      "examples": [
        "{\r     ...,\r     popupCallback: function (attributes, inputs) {\r         \r     },\r     ...\r}"
      ]
    },
    {
      "key": "getLayerDefinedFunctionsByName",
      "description": "Get layer inner function.\r\rDefine layer inner function at VectorLayer.\rEx: {\r  name: 'CSR:map_name',\r  function: {\r    nameFunctionExample: function(){alert('a');}\r  }\r}/n@param name {String} Function name",
      "type": "function(name) : function|Undefined"
    },
    {
      "key": "setDrawing",
      "description": "Controls drawing features on layer.\rPS: Function available to the VectorLayer./n@param enabled {Boolean} True to enable drawing, False otherwise./n@param callbackOnAdd {function} Callback when a new feature is drew.\r  function(vectorLayer, drawEvent)\r    vectorLayer: Current layer.\r    drawEvent: The info of the added polygon.\r  PS: This callback function is called on layer scope.",
      "type": "function(enabled, callbackOnAdd)"
    },
    {
      "key": "convertJsonEntryToFeature",
      "description": "Help to convert a JsonObject into a Layer Feature (can be added to layer)./n@param curObj {JsonObject} Object with properties./n@param optionalGetLonLat {function} Optional function to get position coordinates from JSON.\r  PS: Optional function to get X,Y values from Obj. (By default Longitude and Latitude use fields: lon and lat)\r  function(curObj) @returns OpenLayers.LonLat\r    curObj: Objct with JSON properties.\r  This function receive the 'curObj' and expects to returns the object properties.",
      "type": "function(curObj, optionalGetLonLat) : OpenLayers.Feature.Vector"
    },
    {
      "key": "styleMap",
      "description": "This attribute allows you to customize the layer visualization. (advanced parameter, is easier to use selectedStyle, defaultStyle and hoverStyle)\rIt can be: undefined, a Config Object or an OpenLayers.StyleMap ( http://dev.openlayers.org/docs/files/OpenLayers/StyleMap-js.html ).\r\rPS: Hover uses 'temporary' style.",
      "type": "Object",
      "examples": [
        "StyleMap{[default, select, temporary]: Style {rules:[Rule,], context: {getRadius: function() {return Math.random()}}}"
      ]
    },
    {
      "key": "onFeatureChangeCallback",
      "description": "Callback when a layer feature is added, removed or edited.\r\ronFeatureChangeCallback: function (operationType, arrFeatures)\roperationType: {String} Receive the operation type: 'add' or 'remove' when adding or removing respectively.\rarrFeatures: Array of features affected.",
      "type": "function"
    },
    {
      "key": "onBeforeFeatureChangeCallback",
      "description": "Callback before a layer feature is added, removed or edited.\r\ronBeforeFeatureChangeCallback: function(operationType, arrFeatures)\roperationType: {String} Receive the operation type: 'add' or 'remove' when adding or removing respectively.\rarrFeatures: Array of features affected.\r\rPS: Return false cancel the change operation.",
      "type": "function"
    },
    {
      "key": "onAdded",
      "description": "Callback function called when the layer is added to layer list.\r\rAddedEvent {\r    element: {DOM} 'DOM element of the layer',\r    layer: {OpenLayers.Layer.Vector} 'Javascript Object of the layer',\r    map: {Map} 'MapPanel where the layer was added.',\r    type: {String} 'Type of the event ( added )'\r}",
      "type": "function"
    },
    {
      "key": "defaultStyle",
      "description": "Default style for the geometry. (PS: Accept 'context' and 'rules')\r\rLook at some examples at: http://dev.openlayers.org/examples/\rPS: property 'context': allows definition of functions,\rPS2: property 'rules': allows definition of filters (only the geometries that fit into this rule will be displayed).",
      "type": "Object",
      "examples": [
        "[{color: '${getColor}', context: {getColor: function(attr){return 'green';} }]"
      ]
    },
    {
      "key": "selectStyle",
      "description": "Style for the selected geometry. (PS: Accept 'context' and 'rules')\r\rPS: Selected depends on 'onClick' property that allows to select.\r\rLook at some examples at: http://dev.openlayers.org/examples/\rPS: property 'context': allows definition of functions,\rPS2: property 'rules': allows definition of filters (only the geometries that fit into this rule will be displayed).",
      "type": "Object",
      "examples": [
        "[{color: '${getColor}', context: {getColor: function(attr){return 'green';} }]"
      ]
    },
    {
      "key": "hoverStyle",
      "description": "Style for geometry when mouse is hovering. (PS: Accept 'context' and 'rules')\r\rPS: Hover depends on 'onHover' property that allows to hovering.\r\rLook at some examples at: http://dev.openlayers.org/examples/\rPS: property 'context': allows definition of functions,\rPS2: property 'rules': allows definition of filters (only the geometries that fit into this rule will be displayed).",
      "type": "Object",
      "examples": [
        "[{color: '${getColor}', context: {getColor: function(attr){return 'green';} }]"
      ]
    }
  ],
  "XYZLayer": [
    {
      "key": "_information",
      "completeAPI": "View complete VectorLayer documentation <a href='/api/#category_XYZLayer'>API here</a>.",
      "description": "XYZ Layer configuration.",
      "name": "XYZ configuration"
    },
    {
      "key": "source",
      "description": "Add a layer to store source.\r\rPS: LayerConfig {\r  url: url,\r  name: name,\r  isBaseLayer: isBaseLayer,\r  sphericalMercator: sphericalMercator\r}/n@param layerCfg {LayerConfig} Layer XYZ configuration.\rLayerConfig {\r  url: url,\r  name: name,\r  isBaseLayer: isBaseLayer,\r  sphericalMercator: sphericalMercator\r}",
      "type": "function(layerCfg)"
    },
    {
      "key": "url",
      "description": "Define the url where the map can be fetched. Use ${x} ${y} ${z} as placeholder for x,y,z coordinates.",
      "type": "String",
      "examples": [
        "\"https://tiles.planet.com/basemaps/v1/planet-tiles/planet_medres_visual_2021-09_mosaic/gmap/${z}/${x}/${y}.png?api_key=b24ae87a99624d2cbd8ed6aeb9703280\""
      ]
    }
  ],
  "LegendHtml": [
    {
      "key": "_information",
      "description": "Create a tool with the map legends at any place of the query description.\nUsage: '\\{\\{legendhtml\\}\\}'",
      "name": "Map Legend HTML"
    },
    {
      "key": "reverseLegend",
      "description": "Sort the legend on the decreasing order.",
      "type": "Boolean",
      "examples": [
        "|reverseLegend = true|"
      ],
      "default": "false"
    },
    {
      "key": "filterLayers",
      "description": "Allows to filter layers from displaying its legend.",
      "type": "Array",
      "examples": [
        "|filterLayers = [0]|"
      ],
      "default": "undefined"
    },
    {
      "key": "preventClick",
      "description": "Ignore the filter toggle by mouse clicks on legends.",
      "type": "Boolean",
      "examples": [
        "|preventClick = true|"
      ],
      "default": "undefined"
    },
    {
      "key": "preventClick",
      "description": "Set True to disable the interaction of filtering map by clicking at legend, False otherwise.",
      "type": "Boolean",
      "default": "false"
    },
    {
      "key": "filterLayers",
      "description": "Array of indexes of layers to be included in map legend (from 0 to quantity of layers).\nIf not defined, all layer legends are shown. Otherwise only the indexes according to layer are included.\n\nEx: A composed layer with three maps:\nname: \"CSR:estados,CSR:roads,CSR:municipalities\",\nIf pass 'filterLayers=[1,2] only the legends of 'CSR:roads' and 'CSR:municipalities' are shown.",
      "type": "Array",
      "examples": [
        "[0, 1]"
      ],
      "default": "null"
    },
    {
      "key": "legendId",
      "description": "Keep the legend container ID. (Use this id to toggle each legend filter individually.)",
      "type": "String",
      "default": "null"
    }
  ],
  "OpacitySlider": [
    {
      "key": "_information",
      "description": "Create a tool to select the map opacity slider.\nUsage: '\\{\\{opacityslider\\}\\}'",
      "name": "Opacity slider tool"
    }
  ],
  "LoadCsv": [
    {
      "key": "_information",
      "completeAPI": "View the complete LoadCSV <a href='/api/#category_LoadCsv'>API here</a>.",
      "description": "Describes the API to read and manipulate ExtjsUtils.CSV.CsvTable files from URL.",
      "name": "Csv manager tool"
    }
  ],
  "Slider": [
    {
      "key": "_information",
      "completeAPI": "View the complete Slider <a href='/api/#category_Slider'>API here</a>.",
      "description": "Tool that allows users to create a slider that the user can drag and change its value as map input.",
      "name": "Slider tool"
    },
    {
      "key": "values",
      "description": "Property to define the slider interval limits",
      "type": "Array",
      "examples": [
        "|values = [0, 250]|"
      ]
    }
  ],
  "ZOOM": [
    {
      "key": "_information",
      "completeAPI": "",
      "description": "Functions to control zoom.",
      "name": "Zoom"
    },
    {
      "key": "limitZoomLevel",
      "description": "Sets the maximum zoom level.",
      "type": "function()"
    }
  ],
  "Textfield": [
    {
      "key": "_information",
      "completeAPI": "This tool is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.TextField' target='_blank'>Ext.form,TextField</a>.\nOnly customized properties are <a href='/api/#category_Textfield'>listed here</a>.",
      "description": "TextField is a tool that allows editing of a single line of text.\nUsage:  '\\{\\{textfield\\}\\}'",
      "name": "Textfield tool"
    },
    {
      "key": "value",
      "description": "Set the initial tool content.",
      "type": "String",
      "examples": [
        "|value = text|"
      ]
    },
    {
      "key": "isnumeric",
      "description": "Assures that the text content is a numeric string.",
      "type": "boolean",
      "examples": [
        "|isnumeric=true|"
      ]
    },
    {
      "key": "fieldLabel",
      "description": "Field label.",
      "type": "String",
      "examples": [
        "|fieldLabel = This is the field label|"
      ]
    },
    {
      "key": "style",
      "description": "Element style properties.",
      "type": "String",
      "examples": [
        "|style = color:black;|"
      ]
    }
  ],
  "Label": [
    {
      "key": "_information",
      "completeAPI": "This label is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.Label' target='_blank'>Ext.form.Label</a>.\nOnly some properties are <a href='/api/#category_Label'>listed here</a>.",
      "description": "Create a simple label element to display some text.\nUsage: \\{\\{label|\\}\\}",
      "name": "Label element tool 'label'"
    }
  ],
  "HTML": [
    {
      "key": "_information",
      "completeAPI": "",
      "description": "Any HTML is possible to be added to the layer description.",
      "name": "HTML contents"
    }
  ],
  "LoadJson": [
    {
      "key": "_information",
      "completeAPI": "",
      "description": "Tool to load a remote JSON and use it with map, this object can store string, values and functions.\nUsage: \\{\\{loadjson\\}\\}",
      "name": "LoadJson tool"
    }
  ],
  "PickPoint": [
    {
      "key": "_information",
      "completeAPI": "View the complete PickPoint <a href='/api/#category_PickPoint'>API here</a>",
      "description": "Creates an input that allows users to interact with the real cell or feature value at any position.\n\nThe returned values are from the original mal to the selected point,\n in case of RASTER is returned a cell value, in case of shapefile the geometry is returned too.\nUsage: \\{\\{pickpoint\\}\\}",
      "name": "PickPoint tool"
    },
    {
      "key": "pointVisibility",
      "description": "Default true to show where the last click was. (True to show, False to Hide)",
      "type": "Boolean",
      "examples": [
        "|pointVisibility = false|"
      ],
      "default": "true"
    },
    {
      "key": "unselect",
      "description": "Set if automatically disable after each click. (Default True, set False to not automatically disable).",
      "type": "Boolean",
      "examples": [
        "|unselect = true|"
      ],
      "default": "true"
    },
    {
      "key": "markLayerInd",
      "description": "The layer index of the layer to draw his geometry.",
      "type": "Number",
      "examples": [
        "|markLayerInd = 0|"
      ]
    },
    {
      "key": "onefeature",
      "description": "Keep only the last feature selected.",
      "type": "boolean",
      "examples": [
        "|onefeature = false|"
      ]
    }
  ],
  "Timeline": [
    {
      "key": "_information",
      "examples": [
        "{{timeline|nextStepInterval=1000|id=ANY_UNIQUE_ID|steps=[[“01”, “January”], [“02”, “February”], [“March”], [“April”]]}}"
      ],
      "completeAPI": "View the complete Timeline <a href='/api/#category_Timeline'>API here</a>.",
      "description": "Display a spatial scenarios changes in a timeline.",
      "name": "Timeline tool"
    },
    {
      "key": "steps",
      "description": "Define the timeline change steps.",
      "type": "Array.<Array.<(Object|String)>>"
    },
    {
      "key": "onPlayToggle",
      "description": "Callback function when the timeline start/stop playing./n@param pressed {Boolean} True if the button was pressed, False otherwise./n@param layer {Object} The layer associated to this timeline./n@param timeline {Object} The timeline associated./n@param playBtn {Object} The button changed.",
      "type": "function",
      "examples": [
        "|onPlayToggle = function (pressed, layer, timeline, playBtn) {\r     let text = \"The timeline just \";\r     text += pressed ? \"stopped \" : \"started \";\r     text += \"playing!\";\r     console.log(text);\r}|"
      ]
    },
    {
      "key": "renderHidden",
      "description": "True to start with the timeline hidden.",
      "type": "boolean",
      "examples": [
        "|renderHidden = true|"
      ],
      "default": "false"
    },
    {
      "key": "preloadTiles",
      "description": "Defines if the timeline should load the tiles of the next steps to get smoother transictions.",
      "type": "Boolean",
      "examples": [
        "|preloadTiles = true|"
      ],
      "default": "false"
    }
  ],
  "AsyncLoader": [
    {
      "key": "_information",
      "completeAPI": "",
      "description": "Load one or more external resources by its URL and call a callback function when it finishes.\narray: {Array} A array of resource urls to load.\ncallback: Function that will be called when the load ends.\nUsage: AsyncLoader.loadScriptOnce({Array}, {Function}}",
      "name": "Asynchronous resource loader"
    }
  ],
  "Highcharts": [
    {
      "key": "_information",
      "completeAPI": "Highcharts JS has a complete set of examples and a nice documentation that can be <a target='_blank' href='https://www.highcharts.com/demo'>accessed here</a>.",
      "description": "Highcharts is a library used to easly create interactive charts.\nUsage: (Highcharts.chart(DOM_ID, {});)",
      "name": "Highcharts library"
    }
  ],
  "QGIS": [
    {
      "key": "_information",
      "description": "The style can be defined in QGIS and the automatic publication process will create the same looking style from the style file.",
      "name": "QGIS stylization"
    }
  ],
  "Sankey": [
    {
      "key": "_information",
      "description": "Soon.",
      "name": "Sankey transitions chart"
    }
  ],
  "SummedArea": [
    {
      "key": "_information",
      "completeAPI": "View the complete SummedArea <a href='/api/#category_Slider'>API here</a>.",
      "description": "Create an input of summation in any arbitrary area.\n\nCallBack parameters (context {OpenLayers.Layer}, layersValues {Array[Number]}, inputs {[Object]}, feature {Geometry})\nrunOnClick {Function}  Callback called exactly after sum the map region.,\n\nPS: 'layersValues' return the sum of each internal layer and an adittional value which is the sum of all pixels of resulting layer.",
      "name": "Summed Area tool"
    },
    {
      "key": "description",
      "description": "Create an input of summatory in any arbitrary area.\r\rCallBack parameters (context {OpenLayers.Layer}, layersValues {Array[Number]}, inputs {[Object]}, feature {Geometry})\rrunOnClick {Function}  Callback called exactly after sum the map region.,\r\rPS: 'layersValues' return the sum of each internal layer and an adittional value which is the sum of all pixels of resulting layer./n@param name {String} Input name \"summedarea\"./n@param config {Object} Properties to customize the element./n@param layer {OpenLayers.Layer} Layer which the widget is defined./n@param parameters {Array} Array de parametros antes do processamento para o input.",
      "type": "function(name, config, layer, parameters) : Ext.Container"
    }
  ],
  "Window": [
    {
      "key": "_information",
      "completeAPI": "This tool is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.Window' target='_blank'>Ext.Window</a>.",
      "description": "Creates an interactive floating window.",
      "name": "Floating Window",
      "examples": [
        "{{window|id=UNIQUE_ID|startVisible=true|underButtons=true}}"
      ]
    },
    {
      "key": "height",
      "description": "The window initial height.",
      "type": "number",
      "examples": [
        "|height = 600px|"
      ]
    },
    {
      "key": "onBeforeHide",
      "description": "Callback function to be called before hiding the floating window./n@param layer {Object} Scope of the layer/n@param data {Array} [window, button, windowConfig]\rwindow: Window object;\rbutton: Button created;\rwindowConfig: Window object configuration",
      "type": "function",
      "examples": [
        "|onBeforeHide = function (layer, [window, button, windowConfig]){\r console.log(layer);\r console.log([window, button, windowConfig]);\r}|"
      ]
    },
    {
      "key": "width",
      "description": "The window initial width.",
      "type": "number",
      "examples": [
        "|width = 600px|"
      ]
    },
    {
      "key": "title",
      "description": "The title of the window.",
      "type": "String",
      "examples": [
        "|title = Title of the Window|"
      ],
      "default": "Window"
    },
    {
      "key": "id",
      "description": "The id of the div of the window (where the content can be drawn).",
      "type": "String",
      "examples": [
        "|id = window-div-id|"
      ]
    },
    {
      "key": "text",
      "description": "Define the button text.",
      "type": "string",
      "examples": [
        "|text = I am a button|"
      ],
      "default": "Show/Hide Window"
    },
    {
      "key": "btnID",
      "description": "Define the id of the button that controls the window visibility.",
      "type": "String",
      "examples": [
        "|btnID = window-button-id|"
      ]
    },
    {
      "key": "windowID",
      "description": "Defines the window ID.",
      "type": "String",
      "examples": [
        "|windowID = window-id|"
      ]
    },
    {
      "key": "startVisible",
      "description": "True if the window should start visible or false otherwise.",
      "type": "Boolean",
      "examples": [
        "|startVisible = false|"
      ]
    },
    {
      "key": "ignoreVisibility",
      "description": "Ignore the layer visibility toggle. True to window show or hide ignoring the layer visibility, False otherwise.\r\rPS: This 'ignoreVisibility' is not compatible with the 'associatedButtonID' property, when both are used together this value is ignored.",
      "type": "Boolean",
      "examples": [
        "|ignoreVisibility = false|"
      ]
    },
    {
      "key": "x",
      "description": "Initial absolute X position of the window.\r\rPS: Can be overwritten if defined together with 'underButtons' property.",
      "type": "Number"
    },
    {
      "key": "y",
      "description": "Initial absolute Y position of the window.\r\rPS: Can be overwritten if defined together with 'underButtons' property.",
      "type": "Number"
    },
    {
      "key": "resize",
      "description": "Callback function to be called when the floating window is resized.",
      "type": "function",
      "examples": [
        "|resize = function (){\r console.log(\"I was resized!\");\r}|"
      ]
    }
  ],
  "Layer": [
    {
      "key": "_information",
      "description": "Layer information helper functions.",
      "name": "Layer"
    },
    {
      "key": "getLayersRecord",
      "description": "Gets store layer information from its full name.\r\rPS: Parameter must be the full layer name such as: 'CSR:estados' or 'CSR:altimetria'./n@param layerName {String} Optional Full layer name to look for, otherwise will return all records. (Leave it blank to get all records)/n@param storeName {String} Optional name to look only in a specific sources for 'layerName'. (Fill it to prevent from searching in all stores)",
      "type": "function(layerName, storeName) : Array.<Ext.data.Record>|Ext.data.Record|Null",
      "examples": [
        "Layer.getLayersRecord(\"CSR:estados\");"
      ]
    }
  ],
  "Number": [
    {
      "key": "_information",
      "description": "Functions to manipulate and format numbers.",
      "name": "Number"
    },
    {
      "key": "abbreviateNumber",
      "description": "Auxiliary function to shorten the display of numbers.\r\rPS: The number loses a little precision but becomes more meaningful./n@param value {Number} Value to be displayed./n@param useFixed {Number} If set it will limit the number of decimal places, otherwise it will use the default value./n@param abbreviateNumbers {Array.<Number>} Number suffix name.",
      "type": "function(value, useFixed, abbreviateNumbers) : Number|String"
    }
  ],
  "SourceConfig": [
    {
      "key": "_information",
      "description": "Layers sources configuration.",
      "name": "Source"
    },
    {
      "key": "onLoad",
      "description": "Função de callback quando o store é carregado com sucesso.",
      "type": "function"
    },
    {
      "key": "onError",
      "description": "Função de callback quando o store falha o carregamento.",
      "type": "function"
    }
  ],
  "Request": [
    {
      "key": "_information",
      "description": "Helper functions to deal with HTTP requests.",
      "name": "Request"
    },
    {
      "key": "isLocalUrl",
      "description": "Identify if the 'url' is from the localhost or is from the maps.csr.ufmg.br domain.\r\rPS: If url is left blank it uses the current site url./n@param url {String} String with the url to be checked.",
      "type": "function(url) : Boolean",
      "examples": [
        "ExtjsUtils.REQUEST.isLocalUrl() // true",
        "ExtjsUtils.REQUEST.isLocalUrl(\"www.google.com\") // false"
      ]
    }
  ]
}