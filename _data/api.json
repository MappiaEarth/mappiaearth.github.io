{
  "Layers": {
    "_information": {
      "description": "An Layer is a set of maps. All maps that you want to display together or combine their information needs to be defined inside the same Layer.\nAll information of the active Layer, like map legends and tools, are displayed in a window at the top left of the screen when that Layer is active.\nA Layer can be defined inside a Group, as described in the Group section.\nAn example of Layer with a single map would be:",
      "example": "[\n   {\n      // The Layer name\n      title: 'My first layer!',\n\n      // The map that will be shown\n      name: 'CSR:altimetria',\n\n      // Flag to make the map show on start\n      visibility: true,\n   },\n]"
    },
    "LayersProperties": [
      {
        "key": "_information",
        "description": "You can define the following properties for a Layer:",
        "name": "Layers Properties"
      },
      {
        "key": "description",
        "description": "Define the text that will be displayed when the mouse hover the Legend Window Title.\nThis description applies when the 'source' of the map is 'xyz' or the Layer is a 'vector'.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of description for XYZ map',\n     color: '#666699',\n     elements: [\n        {\n           title: 'This is the Layer Legend Window Title, hover me!',\n           name: 'planet:planet',\n           source: 'xyz',\n           url: 'https://tiles.planet.com/basemaps/v1/planet-tiles/planet_medres_visual_2021-09_mosaic/gmap/${z}/${x}/${y}.png?api_key=PLAK78456687760442eaa3d3da16aaac5f2d',\n           visibility: true,\n           description: 'Hover the Layer Title',\n        },\n     ],\n  },\n]"
        ],
        "default": "'XYZ Title' or 'Vector Title'"
      },
      {
        "key": "description",
        "description": "Define the text that will be displayed when the mouse hover the Legend Window Title.\nThis description applies when the 'source' of the map is 'xyz' or the Layer is a 'vector'.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of description for XYZ map',\n     color: '#666699',\n     elements: [\n        {\n           title: 'This is the Layer Legend Window Title, hover me!',\n           name: 'planet:planet',\n           source: 'xyz',\n           url: 'https://tiles.planet.com/basemaps/v1/planet-tiles/planet_medres_visual_2021-09_mosaic/gmap/${z}/${x}/${y}.png?api_key=PLAK78456687760442eaa3d3da16aaac5f2d',\n           visibility: true,\n           description: 'Hover the Layer Title',\n        },\n     ],\n  },\n]"
        ],
        "default": "'XYZ Title' or 'Vector Title'"
      },
      {
        "key": "descriptionHtml",
        "description": "Define the content that will be displayed at the Query section (\"Exibir Consulta\" button).\nThis property accepts any string in HTML format. Besides that, you can also use predefined tools.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of descriptionHTML',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has a custom descriptionHTML',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              {\n                 type: 'query',\n                 pressed: true\n              },\n           ],\n           descriptionHtml:\n              '&lt;p&gt;You can use HTML tags&lt;/p&gt;'\n              +\n              '\\{\\{label|text=Or the tools from Mappia:\\}\\}'\n              +\n              '\\{\\{button|text=I\\'m a button from Mappia\\}\\}',\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty",
        "see": [
          "You can find more information about the tools available for use in: [Tools Section](#group_Tools)."
        ]
      },
      {
        "key": "disabledAttributes",
        "description": "Define which styles will be hidden in the Style Chooser Combobox from Layers that has the 'source' property as 'local'.\nYou need to pass the name of a style as in the GetCapabilities() xml. They follow the pattern of the map name, underline (_) and then the number of the style. (<map_name>_<number>).\nYou can hide more than one style. For this you only need to separate their names by commas.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of disabledAttributes',\n     color: '#666699',\n     elements: [\n        {\n           title: 'This Layer hides the styles \\'Mapa geológico\\' and \\'Tempo geológico\\' from the styles choose combobox',\n           name: 'CSR:geologia',\n           source: 'local',\n           visibility: true,\n           // geologia_2 is the style 'Tempo geológico'\n           // geologia_1 is the style 'Mapa geológico'\n           // The 'disabledAttributes' property is used to hide the styles from the styles chooser combobox\n           // All styles that are hidden must be separated by commas\n           disabledAttributes: 'geologia_2,geologia_1',\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "disabledAttributes",
        "description": "Define which styles will be hidden in the Style Chooser Combobox from Layers that has the 'source' property as 'local'.\nYou need to pass the name of a style as in the GetCapabilities() xml. They follow the pattern of the map name, underline (_) and then the number of the style. (<map_name>_<number>).\nYou can hide more than one style. For this you only need to separate their names by commas.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of disabledAttributes',\n     color: '#666699',\n     elements: [\n        {\n           title: 'This Layer hides the styles \\'Mapa geológico\\' and \\'Tempo geológico\\' from the styles choose combobox',\n           name: 'CSR:geologia',\n           source: 'local',\n           visibility: true,\n           // geologia_2 is the style 'Tempo geológico'\n           // geologia_1 is the style 'Mapa geológico'\n           // The 'disabledAttributes' property is used to hide the styles from the styles chooser combobox\n           // All styles that are hidden must be separated by commas\n           disabledAttributes: 'geologia_2,geologia_1',\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "exclusiveGroupDetails",
        "description": "Define a name for a Layer Details. Between all Layers with the same ‘exclusiveGroupDetails’ name, only one Layer can have its Legend open each time.",
        "type": "String",
        "examples": [
          "[\n  {\n     viewTitle: 'Only one Legend can be open each time',\n     title: 'Example of exclusiveGroupDetails',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:estados',\n           source: 'calculate',\n           exclusiveGroupDetails: 'ExampleName',\n           visibility: true,\n        },\n        {\n           title: 'Layer 2',\n           name: 'CSR:rios_principais',\n           source: 'calculate',\n           exclusiveGroupDetails: 'ExampleName',\n           visibility: true,\n        },\n        {\n           title: 'Layer 3',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           exclusiveGroupDetails: 'ExampleName',\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "exclusiveGroupDetails",
        "description": "Define a name for a Layer Details. Between all Layers with the same ‘exclusiveGroupDetails’ name, only one Layer can have its Legend open each time.",
        "type": "String",
        "examples": [
          "[\n  {\n     viewTitle: 'Only one Legend can be open each time',\n     title: 'Example of exclusiveGroupDetails',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:estados',\n           source: 'calculate',\n           exclusiveGroupDetails: 'ExampleName',\n           visibility: true,\n        },\n        {\n           title: 'Layer 2',\n           name: 'CSR:rios_principais',\n           source: 'calculate',\n           exclusiveGroupDetails: 'ExampleName',\n           visibility: true,\n        },\n        {\n           title: 'Layer 3',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           exclusiveGroupDetails: 'ExampleName',\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "extents",
        "description": "Define which tiles will be used to render the map. All the tiles that are within the 'extents' coordinates will be used to render the map.\nThe extents must be in EPSG:4326 (coordinates in lat,long). Also, the array values need to be in the order: [minX, minY, maxX, maxY].",
        "type": "Array.<Numeric>",
        "examples": [
          "// Play around with the maps visibility to check the regions defined by the extents.\n[\n  {\n     title: 'Example of extents',\n     color: '#FFA900',\n     elements: [\n        {\n           title: 'Restricted extents',\n           name: 'CSR:altimetria',\n           visibility: true,\n           // Follows the order [minX, minY, maxX, maxY]\n           extents: [-48.5, -14.5, -46.0, -13.0],\n        },\n        {\n           title: 'Restricted extents 2',\n           name: 'CSR:altimetria',\n           visibility: true,\n           // Follows the order [minX, minY, maxX, maxY]\n           extents: [-43.9, -19.8, -43.1, -18.9],\n        },\n        {\n           title: 'This Layer displays the hole map',\n           name: 'CSR:altimetria',\n           // This extents render the whole world.\n           extents: [-180.0000, -90.0000, 180.0000, 90.0000],\n           startListed: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "Array.empty"
      },
      {
        "key": "extents",
        "description": "Define which tiles will be used to render the map. All the tiles that are within the 'extents' coordinates will be used to render the map.\nThe extents must be in EPSG:4326 (coordinates in lat,long). Also, the array values need to be in the order: [minX, minY, maxX, maxY].",
        "type": "Array.<Numeric>",
        "examples": [
          "// Play around with the maps visibility to check the regions defined by the extents.\n[\n  {\n     title: 'Example of extents',\n     color: '#FFA900',\n     elements: [\n        {\n           title: 'Restricted extents',\n           name: 'CSR:altimetria',\n           visibility: true,\n           // Follows the order [minX, minY, maxX, maxY]\n           extents: [-48.5, -14.5, -46.0, -13.0],\n        },\n        {\n           title: 'Restricted extents 2',\n           name: 'CSR:altimetria',\n           visibility: true,\n           // Follows the order [minX, minY, maxX, maxY]\n           extents: [-43.9, -19.8, -43.1, -18.9],\n        },\n        {\n           title: 'This Layer displays the hole map',\n           name: 'CSR:altimetria',\n           // This extents render the whole world.\n           extents: [-180.0000, -90.0000, 180.0000, 90.0000],\n           startListed: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "Array.empty"
      },
      {
        "key": "hideLegendButton",
        "description": "Defines if the Legend Button at the bottom right of the Legend Window should be hidden. Set it to 'true' to hide the button. Set it to 'false' to display it.\nThis property only applies to the layer that has the 'type' property as 'local'.",
        "type": "boolean",
        "examples": [
          "[\n  {\n     title: 'Hiding the Legend Button',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The Layer Legend Button will be hidden',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           hideLegendButton: true,\n           descriptionHtml:\n              '\\{\\{label|text=The legend button is hidden, only the descriptionHtml is visible\\}\\}',\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "hideLegendButton",
        "description": "Defines if the Legend Button at the bottom right of the Legend Window should be hidden. Set it to 'true' to hide the button. Set it to 'false' to display it.\nThis property only applies to the layer that has the 'type' property as 'local'.",
        "type": "boolean",
        "examples": [
          "[\n  {\n     title: 'Hiding the Legend Button',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The Layer Legend Button will be hidden',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           hideLegendButton: true,\n           descriptionHtml:\n              '\\{\\{label|text=The legend button is hidden, only the descriptionHtml is visible\\}\\}',\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "hideListing",
        "description": "Define if should hide a Layer in the list that appears when the mouse hover the Group Title at the top of the screen.\nSet it to 'true' to hide that Layer in the list. Otherwise, set it to 'false' to show it.",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'A Group with 3 Layers, but one is hidden',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Map of the altitude in Brazil',\n           name: 'CSR:altimetria',\n           source: 'local',\n        },\n        {\n           title: 'This Layer will be hidden at the Group list',\n           name: 'CSR:rios_principais',\n           source: 'local',\n           hideListing: true,\n        },\n        {\n           title: 'Map of the geology in Brazil',\n           name: 'CSR:geologia',\n           source: 'local',\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "hideStyleChooser",
        "description": "Define if should hide the Combobox with the map possible styles that can be applied to a map in a Layer that has the 'source' 'local'.",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'Example with hidden style Combobox',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Map of the geology in Brazil',\n           name: 'CSR:geologia',\n           source: 'local',\n           visibility: true,\n           startLegendOpen: true,\n           hideStyleChooser: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "insideOpacity",
        "description": "Defines the opacity for the maps defined in the 'name' property.\nThis property is an array of values which are the opacity that will be applied in the same order that the map was defined in the 'name' property. For example, the first value in the 'insideOpacity' array will define the opacity for the first map defined in the 'name' property, the second value is the opacity for the second map, and so on.\nThe opacity value is a number between 0 and 1. 0 being transparent and 1 opaque.",
        "type": "Array.<Numeric>",
        "examples": [
          "[\n  {\n     title: 'Example of insideOpacity',\n     color: '#666699',\n     elements: [\n        {\n           name: 'CSR:estados,CSR:rios_principais,CSR:geologia',\n           source: 'calculate',\n           // The values are applied to the layers in the same order as they are defined in the name property. So the CSR:estados map has the opacity of 0.5, the CSR:rios_principais map has the opacity of 1, and the CSR:geologia map has the opacity of 0.7.\n           insideOpacity: [0.5, 1, 0.7],\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "[1, 1, 1, ...]"
      },
      {
        "key": "insideOpacity",
        "description": "Defines the opacity for the maps defined in the 'name' property.\nThis property is an array of values which are the opacity that will be applied in the same order that the map was defined in the 'name' property. For example, the first value in the 'insideOpacity' array will define the opacity for the first map defined in the 'name' property, the second value is the opacity for the second map, and so on.\nThe opacity value is a number between 0 and 1. 0 being transparent and 1 opaque.",
        "type": "Array.<Numeric>",
        "examples": [
          "[\n  {\n     title: 'Example of insideOpacity',\n     color: '#666699',\n     elements: [\n        {\n           name: 'CSR:estados,CSR:rios_principais,CSR:geologia',\n           source: 'calculate',\n           // The values are applied to the layers in the same order as they are defined in the name property. So the CSR:estados map has the opacity of 0.5, the CSR:rios_principais map has the opacity of 1, and the CSR:geologia map has the opacity of 0.7.\n           insideOpacity: [0.5, 1, 0.7],\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "[1, 1, 1, ...]"
      },
      {
        "key": "legendTitle",
        "description": "Defines the text that will be displayed at the top of the 'legendhtml tool' declared at the 'descriptionHtml' property",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example custom legend title',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Map of the geology in Brazil',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           legendTitle: 'This is a custom legend title',\n           descriptionHtml:\n              '&bsol;&lcub;&bsol;&lcub;legendhtml&bsol;&rcub;&bsol;&rcub;',\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "legendTitle",
        "description": "Defines the text that will be displayed at the top of the 'legendhtml tool' declared at the 'descriptionHtml' property",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example custom legend title',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Map of the geology in Brazil',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           legendTitle: 'This is a custom legend title',\n           descriptionHtml:\n              '&bsol;&lcub;&bsol;&lcub;legendhtml&bsol;&rcub;&bsol;&rcub;',\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "name",
        "description": "Defines the maps that will be a part of the Layer. Every map defined in here will be shown when the Layer is active. Besides that, all of their information can be used to calculate a new map combining their data.\nIn this website you will find some of the maps that can be used: http://maps.csr.ufmg.br/geonetwork/srv/por/search.\nYou can find their name at the section \"Visão geral do mapa\" under its image. Those maps have the prefix \"CSR:\" before their names.\nMaps can also be uploaded by you. For that, you just need to define the 'source' property as 'file'.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'A Group with two maps',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has two maps!',\n           // Each map is separated by commas\n           // The first map is CSR:rios_principais that have the rivers of Brazil\n           // The second map is CSR:estados that show the states of Brazil\n           name: 'CSR:rios_principais,CSR:estados_cf',\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "name",
        "description": "Defines the maps that will be a part of the Layer. Every map defined in here will be shown when the Layer is active. Besides that, all of their information can be used to calculate a new map combining their data.\nIn this website you will find some of the maps that can be used: http://maps.csr.ufmg.br/geonetwork/srv/por/search.\nYou can find their name at the section \"Visão geral do mapa\" under its image. Those maps have the prefix \"CSR:\" before their names.\nMaps can also be uploaded by you. For that, you just need to define the 'source' property as 'file'.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'A Group with two maps',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has two maps!',\n           // Each map is separated by commas\n           // The first map is CSR:rios_principais that have the rivers of Brazil\n           // The second map is CSR:estados that show the states of Brazil\n           name: 'CSR:rios_principais,CSR:estados_cf',\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "opacity",
        "description": "Define the opacity of the Layer. The opacity is a value between 0 and 1 that is a scale for its transparency. 0 is completely transparent. 1 is completely visible.",
        "type": "Numeric",
        "examples": [
          "[\n {\n   title: 'Example of opacity in a Layer',\n   color: '#666699',\n   elements: [\n     {\n       title: 'This Layer has its opacity set to 50% of the original visibility',\n       name: 'CSR:geologia',\n       source: 'local',\n       visibility: true,\n       opacity: 0.5,\n     },\n   ],\n },\n]"
        ],
        "default": "1"
      },
      {
        "key": "priority",
        "description": "Defines the order of which map will be rendered on top of the others. Layers with higher 'priority' will always be rendered on top of the layers with lower 'priority'.",
        "type": "Number",
        "examples": [
          "[\n  {\n     title: 'At the bottom will be the geology, then the states and at top the rivers',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Map of the states in Brazil',\n           name: 'CSR:estados',\n           source: 'local',\n           priority: 2,\n           visibility: true,\n        },\n        {\n           title: 'Map of the rivers in Brazil',\n           name: 'CSR:rios_principais',\n           source: 'local',\n           priority: 3,\n           visibility: true,\n        },\n        {\n           title: 'Map of the geology in Brazil',\n           name: 'CSR:geologia',\n           source: 'local',\n           priority: 1,\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "0"
      },
      {
        "key": "showRemoveBtn",
        "description": "Defines it the remove button at the top right of the Layer Legend Window show be displayed. Set it to 'true' to show it. Set it to 'false' to hide it.",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'Hiding the remove button',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The \\'X\\' button at the top right of this Layer removes this map',\n           name: 'CSR:rios_principais',\n           source: 'local',\n           visibility: true,\n        },\n        {\n           title: 'There is no button to remove the this map',\n           name: 'CSR:estados',\n           source: 'local',\n           visibility: true,\n           showRemoveBtn: false,\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "source",
        "description": "Defines the source from where the maps declared at the name will be loaded from. The Source can be one of the following:\n   - 'local': The maps in the name will be loaded from the CSR servers\n\n   - 'calculated': The maps in the name gonna be used to calculate a new map in the expression() function and the result will be displayed as the Layer\n\n   - 'file': The map will be loaded from a file or other custom source. For this, you need to define the file type in the 'type' property and the file where the map should be loaded. For example, for a JSON file, you also need to define the 'json' property.\n\n   - 'xyz': The map will be loaded from an url by the XYZ protocol. The url property is required for this type of source. You can find more informations about the XYZ protocol at: https://developers.planet.com/docs/basemaps/tile-services/xyz/",
        "type": "String",
        "examples": [
          "// Example of how to load a map with the local source\n[\n  {\n     title: 'Map rendered by a local source',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Map with local source',\n           name: 'CSR:paises',\n           source: 'local',\n           visibility: true,\n        },\n     ],\n  },\n]",
          "// Example of how to load a map with the calculated source\n[\n  {\n     title: 'Map rendered based on calculation',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Filtering a part of the map',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           updateAutomatically: true,\n           expression: function(layersVals, inputs) {\n              // layerVals have the value of the legend applied in every pixel of the map\n              let mapValue = layersVals[0];\n\n              // Remove every type of relief that is not 'Mantiqueira'\n              if(mapValue != 'Mantiqueira') { // If the pixel is not 'Mantiqueira'\n                 return undefined; // Don't show the pixel\n              }\n\n              // If the pixel is 'Mantiqueira', return the value of the pixel\n              return mapValue;\n           },\n        },\n     ],\n  },\n]",
          "// Example of how to load a map with the file source\n[\n  {\n     title: 'Map rendered based on file source',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Map with file source',\n           name: 'example:map_file_source',\n           source: 'file',\n           visibility: true,\n           // The map is rendered based on the GeoJSON below\n           // The GeoJSON needs to be in EPSG:3857\n           json: JSON.stringify(\n              {\n                 \"type\": \"Polygon\",\n                 \"crs\": {\n                    \"type\": \"name\",\n                    \"properties\": {\n                       \"name\": \"EPSG:3857\"\n                    }\n                 },\n                 \"coordinates\": [\n                    [\n                       [\n                          -625570.6,\n                          6465993.0,\n                       ],\n                       [\n                          -305006.9,\n                          6696510.8,\n                       ],\n                       [\n                          -546330.2,\n                          6768547.6,\n                       ],\n                       [\n                          -445478.6,\n                          7053093.0,\n                       ],\n                       [\n                          -279794.0,\n                          7056694.8,\n                       ],\n                       [\n                          -359034.5,\n                          7337638.4,\n                       ],\n                       [\n                          -211359.0,\n                          7485313.8,\n                       ],\n                       [\n                          62380.8,\n                          6955843.3,\n                       ],\n                       [\n                          220861.7,\n                          6909019.4,\n                       ],\n                       [\n                          91195.5,\n                          6700112.6,\n                       ],\n                       [\n                          213658.1,\n                          6682103.4,\n                       ],\n                       [\n                          -625570.6,\n                          6465993.0,\n                       ],\n                    ],\n                 ],\n              }\n           ),\n        },\n     ],\n  },\n]",
          "// Example of how to load a map with the XYZ source\n// The XYZ source is used to load a map from a URL that contains the &lcub;z&rcub;, &lcub;x&rcub; and &lcub;y&rcub; placeholders\n// The &lcub;z&rcub; is the zoom level, &lcub;x&rcub; is the longitude and &lcub;y&rcub; is the latitude\n[\n  {\n     title: 'Map rendered by a XYZ source',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Base map loaded by XYZ source',\n           // The name of the map that will be added. This name must be unique\n           name: 'planet:planet',\n           source: 'xyz',\n           // The url of the map that will be loaded. The $&lcub;z&rcub;, $&lcub;x&rcub; and $&lcub;y&rcub; placeholders will be replaced by the map library\n           url: 'https://tiles.planet.com/basemaps/v1/planet-tiles/planet_medres_visual_2021-09_mosaic/gmap/$&lcub;z&rcub;/$&lcub;x&rcub;/$&lcub;y&rcub;.png?api_key=PLAK78456687760442eaa3d3da16aaac5f2d',\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "'local'"
      },
      {
        "key": "source",
        "description": "Defines the source from where the maps declared at the name will be loaded from. The Source can be one of the following:\n   - 'local': The maps in the name will be loaded from the CSR servers\n\n   - 'calculated': The maps in the name gonna be used to calculate a new map in the expression() function and the result will be displayed as the Layer\n\n   - 'file': The map will be loaded from a file or other custom source. For this, you need to define the file type in the 'type' property and the file where the map should be loaded. For example, for a JSON file, you also need to define the 'json' property.\n\n   - 'xyz': The map will be loaded from an url by the XYZ protocol. The url property is required for this type of source. You can find more informations about the XYZ protocol at: https://developers.planet.com/docs/basemaps/tile-services/xyz/",
        "type": "String",
        "examples": [
          "// Example of how to load a map with the local source\n[\n  {\n     title: 'Map rendered by a local source',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Map with local source',\n           name: 'CSR:paises',\n           source: 'local',\n           visibility: true,\n        },\n     ],\n  },\n]",
          "// Example of how to load a map with the calculated source\n[\n  {\n     title: 'Map rendered based on calculation',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Filtering a part of the map',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           updateAutomatically: true,\n           expression: function(layersVals, inputs) {\n              // layerVals have the value of the legend applied in every pixel of the map\n              let mapValue = layersVals[0];\n\n              // Remove every type of relief that is not 'Mantiqueira'\n              if(mapValue != 'Mantiqueira') { // If the pixel is not 'Mantiqueira'\n                 return undefined; // Don't show the pixel\n              }\n\n              // If the pixel is 'Mantiqueira', return the value of the pixel\n              return mapValue;\n           },\n        },\n     ],\n  },\n]",
          "// Example of how to load a map with the file source\n[\n  {\n     title: 'Map rendered based on file source',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Map with file source',\n           name: 'example:map_file_source',\n           source: 'file',\n           visibility: true,\n           // The map is rendered based on the GeoJSON below\n           // The GeoJSON needs to be in EPSG:3857\n           json: JSON.stringify(\n              {\n                 \"type\": \"Polygon\",\n                 \"crs\": {\n                    \"type\": \"name\",\n                    \"properties\": {\n                       \"name\": \"EPSG:3857\"\n                    }\n                 },\n                 \"coordinates\": [\n                    [\n                       [\n                          -625570.6,\n                          6465993.0,\n                       ],\n                       [\n                          -305006.9,\n                          6696510.8,\n                       ],\n                       [\n                          -546330.2,\n                          6768547.6,\n                       ],\n                       [\n                          -445478.6,\n                          7053093.0,\n                       ],\n                       [\n                          -279794.0,\n                          7056694.8,\n                       ],\n                       [\n                          -359034.5,\n                          7337638.4,\n                       ],\n                       [\n                          -211359.0,\n                          7485313.8,\n                       ],\n                       [\n                          62380.8,\n                          6955843.3,\n                       ],\n                       [\n                          220861.7,\n                          6909019.4,\n                       ],\n                       [\n                          91195.5,\n                          6700112.6,\n                       ],\n                       [\n                          213658.1,\n                          6682103.4,\n                       ],\n                       [\n                          -625570.6,\n                          6465993.0,\n                       ],\n                    ],\n                 ],\n              }\n           ),\n        },\n     ],\n  },\n]",
          "// Example of how to load a map with the XYZ source\n// The XYZ source is used to load a map from a URL that contains the &lcub;z&rcub;, &lcub;x&rcub; and &lcub;y&rcub; placeholders\n// The &lcub;z&rcub; is the zoom level, &lcub;x&rcub; is the longitude and &lcub;y&rcub; is the latitude\n[\n  {\n     title: 'Map rendered by a XYZ source',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Base map loaded by XYZ source',\n           // The name of the map that will be added. This name must be unique\n           name: 'planet:planet',\n           source: 'xyz',\n           // The url of the map that will be loaded. The $&lcub;z&rcub;, $&lcub;x&rcub; and $&lcub;y&rcub; placeholders will be replaced by the map library\n           url: 'https://tiles.planet.com/basemaps/v1/planet-tiles/planet_medres_visual_2021-09_mosaic/gmap/$&lcub;z&rcub;/$&lcub;x&rcub;/$&lcub;y&rcub;.png?api_key=PLAK78456687760442eaa3d3da16aaac5f2d',\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "'local'"
      },
      {
        "key": "startLegendOpen",
        "description": "Defines if the Legend Window should start or not. Set it to 'true' to make it start open. Set it to 'false' for it to start closed.",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'The Legend Window the Layer will start open',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer Legend Window will start open',\n           name: 'CSR:geologia',\n           source: 'local',\n           startLegendOpen: true,\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "startListed",
        "description": "Define if the Layer should start with its Legend Window visible or not. This does not make the Layer visible on the map by itself. For that, you need to set the 'visibility' property to 'true'.\n'startListed' just displays the Legend Window associated with the Layer.",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'The Legend Window of the third Layer will start visible',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Map of the altitude in Brazil',\n           name: 'CSR:altimetria',\n           source: 'local',\n        },\n        {\n           title: 'Map of the rivers in Brazil',\n           name: 'CSR:rios_principais',\n           source: 'local',\n        },\n        {\n           title: 'This Layer Legend Window will start visible, but is not map',\n           name: 'CSR:geologia',\n           source: 'local',\n           startListed: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "styles",
        "description": "Defines which styles will be applied over the maps defined at the 'name' property.\nThe styles are applied in the same order as the maps are declared in name. For example, if there are 3 maps in the 'name' property and 3 styles. The first style will be applied to the first map, the second to the second map, and so on.\nYou can find which styles are available to use at: TODO: Criar uma forma simplificada de visualizar os estilos disponíveis.\nPS: The Mappia identifier of the style is defined by the name of the layer + '_' + an index.\nPS2: Styles are separated by comma.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of style',\n     color: '#666699',\n     elements: [\n        {\n           name: 'CSR:precip_monthly_average,CSR:precip_monthly_average',\n           // The first style 'precip_monthly_average_1' is applied to the first map 'precip_monthly_average' and the second style 'precip_monthly_average_2' is applied to the second map 'precip_monthly_average'\n           styles: 'precip_monthly_average_1,precip_monthly_average_2',\n           // The source needs to be calculate to apply the style\n           source: 'calculate',\n           visibility: true,\n        },\n     ],\n  },\n]",
          "{\n       ...,\n         name: 'CSR:municipios',\n         style: 'municipios_0',\n       ...\n  }",
          "{\n       ...,\n         name: 'CSR:estados,CSR:geologia',\n         style: 'estados_0,geologia_1',\n       ...\n  }"
        ],
        "default": "string.empty"
      },
      {
        "key": "styles",
        "description": "Defines which styles will be applied over the maps defined at the 'name' property.\nThe styles are applied in the same order as the maps are declared in name. For example, if there are 3 maps in the 'name' property and 3 styles. The first style will be applied to the first map, the second to the second map, and so on.\nYou can find which styles are available to use at: TODO: Criar uma forma simplificada de visualizar os estilos disponíveis.\nPS: The Mappia identifier of the style is defined by the name of the layer + '_' + an index.\nPS2: Styles are separated by comma.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of style',\n     color: '#666699',\n     elements: [\n        {\n           name: 'CSR:precip_monthly_average,CSR:precip_monthly_average',\n           // The first style 'precip_monthly_average_1' is applied to the first map 'precip_monthly_average' and the second style 'precip_monthly_average_2' is applied to the second map 'precip_monthly_average'\n           styles: 'precip_monthly_average_1,precip_monthly_average_2',\n           // The source needs to be calculate to apply the style\n           source: 'calculate',\n           visibility: true,\n        },\n     ],\n  },\n]",
          "{\n       ...,\n         name: 'CSR:municipios',\n         style: 'municipios_0',\n       ...\n  }",
          "{\n       ...,\n         name: 'CSR:estados,CSR:geologia',\n         style: 'estados_0,geologia_1',\n       ...\n  }"
        ],
        "default": "string.empty"
      },
      {
        "key": "thumbUrl",
        "description": "Define the thumbnail image that is displayed when the mouse hovers the Legend Window title.\nYou can define any image you would like to display as the map thumbnail. You just need to pass its URL.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of thumbUrl',\n     color: '#FFA900',\n     elements: [\n        {\n           title: 'There is a puppy hidden in here! Hover me! <3',\n           name: 'CSR:altimetria',\n           visibility: true,\n           thumbUrl: 'https://fastly.picsum.photos/id/237/200/300.jpg?hmac=TmmQSbShHz9CdQm0NkEjx1Dyh_Y984R9LpNrpvH2D_U',\n        },\n     ],\n  },\n]"
        ],
        "default": "undefined"
      },
      {
        "key": "thumbUrl",
        "description": "Define the thumbnail image that is displayed when the mouse hovers the Legend Window title.\nYou can define any image you would like to display as the map thumbnail. You just need to pass its URL.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of thumbUrl',\n     color: '#FFA900',\n     elements: [\n        {\n           title: 'There is a puppy hidden in here! Hover me! <3',\n           name: 'CSR:altimetria',\n           visibility: true,\n           thumbUrl: 'https://fastly.picsum.photos/id/237/200/300.jpg?hmac=TmmQSbShHz9CdQm0NkEjx1Dyh_Y984R9LpNrpvH2D_U',\n        },\n     ],\n  },\n]"
        ],
        "default": "undefined"
      },
      {
        "key": "title",
        "description": "Defines the Title that will be displayed at the Legend Window in the top left corner of the screen and inside the Group List at the top center of the screen.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'The title of the Group shows up at the top center of the screen and has a List inside it.',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The title of the Layer is shown at the Legend Window and inside the menu of the Group name.',\n           name: 'CSR:capitals',\n           visibility: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "'layer_name' The default value is the layer name."
      },
      {
        "key": "updateAutomatically",
        "description": "Define if a Layer with the 'source' value as 'calculate' should be updated automatically after any user interactions, like changing an input value.\nIf you’re creating a Layer with the 'source: calculate' you need to set this property to 'true' for it to render.",
        "type": "Boolean",
        "examples": [
          "[\n {\n   title: 'The map will be automatically calculated',\n   color: '#666699',\n   elements: [\n     {\n       title: 'This layer is showing just one type of relief',\n       name: 'CSR:geologia',\n       source: 'calculate',\n       visibility: true,\n       updateAutomatically: true,\n       expression: function(layersVals, inputs) {\n         // layerVals have the value of the legend applied in every pixel of the map\n         let mapValue = layersVals[0];\n\n         // Remove every type of relief that is not 'Mantiqueira'\n         if(mapValue != 'Mantiqueira') { // If the pixel is not 'Mantiqueira'\n             return undefined; // Don't show the pixel\n         }\n\n         // If the pixel is 'Mantiqueira', return the value of the pixel\n         return mapValue;\n       },\n     },\n   ],\n },\n]"
        ],
        "default": "false"
      },
      {
        "key": "visibility",
        "description": "Define if the Layer should start visible or not. \nSet it to 'true' for the Layer start visible. Otherwise, set it to 'false' and the Layer will start hidden.",
        "type": "Boolean",
        "examples": [
          "[\n {\n   title: 'Example of visibility in a Layer',\n   color: '#666699',\n   elements: [\n     {\n       title: 'This layer will start visible',\n       name: 'CSR:geologia',\n       source: 'local',\n       visibility: true,\n     },\n   ],\n },\n]"
        ],
        "default": "false"
      }
    ],
    "LayersFunctions": [
      {
        "key": "_information",
        "description": "You can use the following functions for a Layer:",
        "name": "Layers Functions"
      },
      {
        "key": "afterCalc",
        "description": "This function is executed right after the 'expression()' calculations.\nThis function is only available for a Layer with a 'source' of type 'calculate' and that has defined the 'expression()' function.\n@param inputs {Array} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of afterCalc function',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This afterCalc function will show a message at the bottom right of the screen',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              {\n                 type: 'query',\n                 pressed: true\n              },\n           ],\n           descriptionHtml:\n              '&bsol;&lcub;&bsol;&lcub;label|text=The afterCalc is run after every expression() execution&bsol;&rcub;&bsol;&rcub;'\n              +\n              '&bsol;&lcub;&bsol;&lcub;textfield|fieldLabel=Enter your name|id=textInput|labelStyle=text-align:center;&bsol;&rcub;&bsol;&rcub;',\n           // The expression function is mandatory to use the afterCalc function.\n           expression: function(layerVals, inputs) {\n              return undefined;\n           },\n           afterCalc: function(inputs) {\n              let inputValue = inputs[0];\n              ExtjsUtils.ALERTIFY.log('Hello ' + inputValue + '!');\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "afterCalc",
        "description": "This function is executed right after the 'expression()' calculations.\nThis function is only available for a Layer with a 'source' of type 'calculate' and that has defined the 'expression()' function.\n@param inputs {Array} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of afterCalc function',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This afterCalc function will show a message at the bottom right of the screen',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              {\n                 type: 'query',\n                 pressed: true\n              },\n           ],\n           descriptionHtml:\n              '&bsol;&lcub;&bsol;&lcub;label|text=The afterCalc is run after every expression() execution&bsol;&rcub;&bsol;&rcub;'\n              +\n              '&bsol;&lcub;&bsol;&lcub;textfield|fieldLabel=Enter your name|id=textInput|labelStyle=text-align:center;&bsol;&rcub;&bsol;&rcub;',\n           // The expression function is mandatory to use the afterCalc function.\n           expression: function(layerVals, inputs) {\n              return undefined;\n           },\n           afterCalc: function(inputs) {\n              let inputValue = inputs[0];\n              ExtjsUtils.ALERTIFY.log('Hello ' + inputValue + '!');\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "beforeCalc",
        "description": "This function is executed before any calculation is made in the 'expression()' function.\nThis function is only available for a Layer with a 'source' of type 'calculate'. Also, it’s called even if there is no definition for the 'expression()' function.\n@param inputs {Array} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of beforeCalc function',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This beforeCalc function will show a message at the bottom right of the screen',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              {\n                 type: 'query',\n                 pressed: true\n              },\n           ],\n           descriptionHtml:\n              '&bsol;&lcub;&bsol;&lcub;label|text=The beforeCalc function will be called after every user interaction before any calculation&bsol;&rcub;&bsol;&rcub;'\n              +\n              '&bsol;&lcub;&bsol;&lcub;textfield|fieldLabel=Enter your name|id=textInput|labelStyle=text-align:center;&bsol;&rcub;&bsol;&rcub;',\n           beforeCalc: function(inputs) {\n              let inputValue = inputs[0];\n              ExtjsUtils.ALERTIFY.log('Hello ' + inputValue + '!');\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "beforeCalc",
        "description": "This function is executed before any calculation is made in the 'expression()' function.\nThis function is only available for a Layer with a 'source' of type 'calculate'. Also, it’s called even if there is no definition for the 'expression()' function.\n@param inputs {Array} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of beforeCalc function',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This beforeCalc function will show a message at the bottom right of the screen',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              {\n                 type: 'query',\n                 pressed: true\n              },\n           ],\n           descriptionHtml:\n              '&bsol;&lcub;&bsol;&lcub;label|text=The beforeCalc function will be called after every user interaction before any calculation&bsol;&rcub;&bsol;&rcub;'\n              +\n              '&bsol;&lcub;&bsol;&lcub;textfield|fieldLabel=Enter your name|id=textInput|labelStyle=text-align:center;&bsol;&rcub;&bsol;&rcub;',\n           beforeCalc: function(inputs) {\n              let inputValue = inputs[0];\n              ExtjsUtils.ALERTIFY.log('Hello ' + inputValue + '!');\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "expression",
        "description": "This function is executed for every pixel in the map. It can be used to process the information of all maps in the Layer to create a new one.\nThis function is called regularly to update the map.\n@param layerVals {Array.<LayerValues>} Is an array that has the value associated with the current pixel for each map defined in the 'name' property.\nThe values order is the same as the one in ‘name’. For example, if in the 'name' property we have 'name: CSR:geologia,CSR:altimetria' the layerVals[0] has the value for the 'CSR:geologia' map and the layerVals[1] has the value for the 'CSR:altimetria'.\n@param inputs {Array} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of expression function',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer is the result of the calculation of two maps',\n           name: 'CSR:geologia,CSR:altimetria',\n           source: 'calculate',\n           legendTitle: 'All geologys above 800m',\n           visibility: true,\n           expression: function(layerVals, inputs) {\n              let geologyValue = layerVals[0];\n              let altitudeValue = layerVals[1];\n\n              // Hide all values lower than 800\n              if (altitudeValue < 800) {\n                 return undefined;\n              }\n\n              return geologyValue;\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null",
        "returnDescription": "Value of each processed pixel."
      },
      {
        "key": "expression",
        "description": "This function is executed for every pixel in the map. It can be used to process the information of all maps in the Layer to create a new one.\nThis function is called regularly to update the map.\n@param layerVals {Array.<LayerValues>} Is an array that has the value associated with the current pixel for each map defined in the 'name' property.\nThe values order is the same as the one in ‘name’. For example, if in the 'name' property we have 'name: CSR:geologia,CSR:altimetria' the layerVals[0] has the value for the 'CSR:geologia' map and the layerVals[1] has the value for the 'CSR:altimetria'.\n@param inputs {Array} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of expression function',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer is the result of the calculation of two maps',\n           name: 'CSR:geologia,CSR:altimetria',\n           source: 'calculate',\n           legendTitle: 'All geologys above 800m',\n           visibility: true,\n           expression: function(layerVals, inputs) {\n              let geologyValue = layerVals[0];\n              let altitudeValue = layerVals[1];\n\n              // Hide all values lower than 800\n              if (altitudeValue < 800) {\n                 return undefined;\n              }\n\n              return geologyValue;\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null",
        "returnDescription": "Value of each processed pixel."
      },
      {
        "key": "functions",
        "description": "Here, you can define any function you want to handle events from the tools defined in the descriptionHtml.\nFor example, if you want to handle the callback of a button, you can define the function for its 'handler' property here.\nThese functions only exist in the Layer where they’re a part of.\nTo use a function in a Tool you just need to use the function name in the property that triggers the callback.\nYou can also access the functions using the 'this' (this.functions['<function_name>']) in any.",
        "type": "Object",
        "examples": [
          "[\n  {\n     title: 'Example of functions property',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Click the button to see a message',\n           name: 'CSR:geologia',\n           group: 'Query',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type:'query',\n                 pressed: true,\n              },\n           ],\n           descriptionHtml: \n              '\\{\\{button|id=test_button|text=Click me!|handler=handleTestButtonClick\\}\\}',\n           functions: {\n              handleTestButtonClick: function() {\n                 ExtjsUtils.ALERTIFY.log('Button clicked!');\n              },\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "legendColor",
        "description": "This function generates the color of each value/category of the calculated map generated by the 'expression()' function.\nThe return value is the legend color that will be applied to the category.\nPS: This function callback is called in layer context.\n@param color {Array.<Numeric>} Array with three numbers (0 to 255) that define the RGB color of the original legend.\n@param inputs {Array.<Object>} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).\n@param lastValue {String} The last legend value that had its color calculated.\n@param currentValue {String} The actual legend value that it's being calculated.\n@param ruleIndex {Numeric} The index of the actual legend value that it’s being calculated. I.e. The first legend value is 0, the second is 1, and so on.",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of legendColor',\n     color: '#666699',\n     elements: [\n        {\n           title: 'The legendColor function will generate a custom color for each category, based on its value',\n           name: 'CSR:altimetria',\n           source: 'calculate',\n           updateAutomatically: true,\n           visibility: true,\n           expression: function(layersVals, inputs) {\n              return layersVals[0];\n           },\n           // This create a custom colors palette for the legend of the result map from the 'expression' function\n           legendColor: function(color, inputs, lastValue, currentValue, ruleIndex) {\n              let red = 0;\n              let green = currentValue * 255 / 1830;\n              let blue = 0;\n              \n              return [red, green, blue];\n           },\n        },\n     ],\n  },\n]"
        ],
        "returnDescription": "The new color to the value in [R,G,B] format."
      },
      {
        "key": "legendColor",
        "description": "This function generates the color of each value/category of the calculated map generated by the 'expression()' function.\nThe return value is the legend color that will be applied to the category.\nPS: This function callback is called in layer context.\n@param color {Array.<Numeric>} Array with three numbers (0 to 255) that define the RGB color of the original legend.\n@param inputs {Array.<Object>} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).\n@param lastValue {String} The last legend value that had its color calculated.\n@param currentValue {String} The actual legend value that it's being calculated.\n@param ruleIndex {Numeric} The index of the actual legend value that it’s being calculated. I.e. The first legend value is 0, the second is 1, and so on.",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of legendColor',\n     color: '#666699',\n     elements: [\n        {\n           title: 'The legendColor function will generate a custom color for each category, based on its value',\n           name: 'CSR:altimetria',\n           source: 'calculate',\n           updateAutomatically: true,\n           visibility: true,\n           expression: function(layersVals, inputs) {\n              return layersVals[0];\n           },\n           // This create a custom colors palette for the legend of the result map from the 'expression' function\n           legendColor: function(color, inputs, lastValue, currentValue, ruleIndex) {\n              let red = 0;\n              let green = currentValue * 255 / 1830;\n              let blue = 0;\n              \n              return [red, green, blue];\n           },\n        },\n     ],\n  },\n]"
        ],
        "returnDescription": "The new color to the value in [R,G,B] format."
      },
      {
        "key": "onInputsReady",
        "description": "This function is called when all inputs have been loaded and are ready. Even from Layers that aren’t visible.\n@param inputs {Array} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of onInputsReady function',\n     color: '#666699',\n     elements: [\n        {\n           title: 'This Layer shows the starting value of the text input field',\n           name: 'CSR:geologia',\n           group: 'Query',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type:'query',\n                 pressed: true,\n              },\n           ],\n           descriptionHtml: \n              '\\{\\{textfield|id=textInput|fieldLabel=Message|value=I love maps!|labelStyle=text-align:center;\\}\\}',\n           onInputsReady: function(inputs) {\n              let textInputValue = inputs[0];\n              ExtjsUtils.ALERTIFY.log('The text input initial value is: ' + textInputValue);\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "onInputsReady",
        "description": "This function is called when all inputs have been loaded and are ready. Even from Layers that aren’t visible.\n@param inputs {Array} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of onInputsReady function',\n     color: '#666699',\n     elements: [\n        {\n           title: 'This Layer shows the starting value of the text input field',\n           name: 'CSR:geologia',\n           group: 'Query',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type:'query',\n                 pressed: true,\n              },\n           ],\n           descriptionHtml: \n              '\\{\\{textfield|id=textInput|fieldLabel=Message|value=I love maps!|labelStyle=text-align:center;\\}\\}',\n           onInputsReady: function(inputs) {\n              let textInputValue = inputs[0];\n              ExtjsUtils.ALERTIFY.log('The text input initial value is: ' + textInputValue);\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "onVisibilityChange",
        "description": "This function is called whenever a Layer changes its visibility.\nLike, when the user toggle the value in the visibility button at the top right in the Legend Window.\n@param visibility {Boolean} It’s true if the Layer is visible or false otherwise.\n@param inputs {Object} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of callback when changing the visibility',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The function onVisibilityChange will be called when the visibility of this layer changes.',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              {\n                 type:\"query\",\n                 pressed: true\n              },\n           ],\n           descriptionHtml:\n              '\\{\\{label|text=You can change the map visibility by clicking at the eye icon on the top of this window\\}\\}',\n           onVisibilityChange: function(state, inputs) {\n              if(state) {\n                 ExtjsUtils.ALERTIFY.log('The layer is now visible');\n              }\n              else {\n                 ExtjsUtils.ALERTIFY.log('The layer is now hidden');\n              }\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "onVisibilityChange",
        "description": "This function is called whenever a Layer changes its visibility.\nLike, when the user toggle the value in the visibility button at the top right in the Legend Window.\n@param visibility {Boolean} It’s true if the Layer is visible or false otherwise.\n@param inputs {Object} The value of each input defined in the descriptionHtml. The order of the values is the same as the inputs (i.e. the first input in the descriptionHtml is inputs[0], the second is inputs[1] and so on).",
        "type": "function",
        "examples": [
          "[\n  {\n     title: 'Example of callback when changing the visibility',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The function onVisibilityChange will be called when the visibility of this layer changes.',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              {\n                 type:\"query\",\n                 pressed: true\n              },\n           ],\n           descriptionHtml:\n              '\\{\\{label|text=You can change the map visibility by clicking at the eye icon on the top of this window\\}\\}',\n           onVisibilityChange: function(state, inputs) {\n              if(state) {\n                 ExtjsUtils.ALERTIFY.log('The layer is now visible');\n              }\n              else {\n                 ExtjsUtils.ALERTIFY.log('The layer is now hidden');\n              }\n           },\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      }
    ]
  },
  "Groups": {
    "_information": {
      "description": "A Group is a set of Layers. You can defined the Layers of a Group inside its 'elements' property as described in the 'Groups Properties' section.\nWhen you define a Group, a sub menu is created at the top of the screen.That sub menu has all the Layers defined inside the Group.\nIt's possible to define as many groups as you want. You simply need to create a pair of open and closed curly brackets, separated by commas:",
      "example": "[\n   {\n      title: 'My first Group!',\n      color: '#A020F0',\n      elements: [\n         {\n            title: 'Layer 1 of group 1',\n            name: 'CSR:batimetria',\n            visibility: true,\n         },\n      ],\n   },\n   {\n      title: 'My second Group!!',\n      color: '#FFA900',\n      elements: [\n         {\n            title: 'Layer 1 of group 2',\n            name: 'CSR:altimetria',\n            visibility: true,\n         },\n      ],\n   },\n]"
    },
    "GroupProperties": [
      {
        "key": "_information",
        "description": "Inside the brackets of a Group you can define their properties, which are the following:",
        "name": "Groups Properties"
      },
      {
        "key": "color",
        "description": "Defines the Color of the group. This is the Color of the Title and some elements inside the sub menu on the top of the screen.",
        "type": "String",
        "examples": [
          "[\n   {\n      title: 'My orange group',\n      color: '#FFA500',\n   },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "defaultProperties",
        "description": "Specifies properties that apply universally to all layers within a group, including nested subgroups and their respective layers.\nPriority is determined by specificity: a property defined at the layer level takes precedence, followed by properties defined in the nearest group, and so forth.",
        "type": "function()",
        "examples": [
          "[\n  {\n     title: 'Example of defaultProperties',\n     color: '#FFA500',\n     defaultProperties: {\n        source: 'local',\n        visibility: true,\n        opacity: 0.7,\n     },\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:geologia',\n        },\n        {\n           title: 'Layer 2',\n           name: 'CSR:rios_principais',\n        },\n        {\n           title: 'Layer 3',\n           name: 'CSR:estados',\n           // Any internal redefinition will override the defaultProperties\n           visibility: false,\n        },\n     ],\n  },\n]"
        ],
        "default": "{}"
      },
      {
        "key": "defaultProperties",
        "description": "Specifies properties that apply universally to all layers within a group, including nested subgroups and their respective layers.\nPriority is determined by specificity: a property defined at the layer level takes precedence, followed by properties defined in the nearest group, and so forth.",
        "type": "function()",
        "examples": [
          "[\n  {\n     title: 'Example of defaultProperties',\n     color: '#FFA500',\n     defaultProperties: {\n        source: 'local',\n        visibility: true,\n        opacity: 0.7,\n     },\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:geologia',\n        },\n        {\n           title: 'Layer 2',\n           name: 'CSR:rios_principais',\n        },\n        {\n           title: 'Layer 3',\n           name: 'CSR:estados',\n           // Any internal redefinition will override the defaultProperties\n           visibility: false,\n        },\n     ],\n  },\n]"
        ],
        "default": "{}"
      },
      {
        "key": "elements",
        "description": "Defines the Layers that will be part of the Group. Each Layer can have multiple maps inside it. \nAll maps inside a Layer will be shown together when that Layer is enabled. \nBesides that, all informations about those maps can be used to calculate a new one using custom functions that can be writen in JavaScript.",
        "type": "Array.<Layers>",
        "examples": [
          "[\n  {\n     title: 'A group with Layers!',\n     color: '#FFA500',\n     elements: [\n        // Define your Layers here\n     ],\n  },\n]"
        ],
        "default": "Array.empty",
        "see": [
          "To learn more about Layers and it’s properties, check their documentation at: [Layer Section](#group_Layers)."
        ]
      },
      {
        "key": "openGroup",
        "description": "Defines if the 'viewTitle' should start opening or collapse.\nSet it to 'true' for the 'viewTitle' start open or 'false' for it to start closed.\nThis property only applies to a group that has the 'viewTitle' property defined.\nIf the Group View has any visible Layers or any Layer has the 'openGroup' property set to 'true', the Group View will start open.",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     viewTitle: 'This Group View will start opened',\n     viewColor: '#FFFFFF',\n     title: 'Group 1',\n     color: '#666699',\n     openGroup: true,\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:estados',\n           source: 'calculate',\n           startListed: true,\n        },\n     ],\n  },\n  {\n     viewTitle: 'This Group View will start closed',\n     viewColor: '#FFFFFF',\n     title: 'Group 2',\n     color: '#666699',\n     elements: [\n        {\n           title: 'Layer 2',\n           name: 'CSR:rios_principais',\n           source: 'calculate',\n           startListed: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "title",
        "description": "Defines the Title of the group. The Title is shown at the sub menu on the top of the screen.",
        "type": "String",
        "examples": [
          "[\n   {\n     title: 'My new group!',\n   },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "viewTitle",
        "description": "Define the Title of the View that will gather together the elements inside it (Groups or other Views).\nIf an external View has in its elements another definition of a 'viewTitle', subviews will be created, like in the second example.",
        "type": "String",
        "examples": [
          "// Exemple 1: View with a Layers inside it\n[\n  {\n     viewTitle: 'This View has a Group 3 Layers',\n     title: 'This is a Group with 3 Layers',\n     color: '#5BA300',\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:estados',\n           source: 'local',\n           opacity: 0.5,\n           visibility: true,\n        },\n        {\n           title: 'Layer 2',\n           name: 'CSR:rios_principais',\n           source: 'local',\n           opacity: 0.5,\n           visibility: true,\n        },\n        {\n           title: 'Layer 3',\n           name: 'CSR:geologia',\n           source: 'local',\n           opacity: 0.65,\n           visibility: true,\n        },\n     ],\n  },\n]",
          "// Exemple 2: View with others 'viewTitle' defined inside it\n[\n  {\n     // This is the definition of the View\n     viewTitle: 'This External View has 2 others Inner Views inside it, each with 1 Group that has 1 Layer',\n     title: 'This View has 2 Groups, each with 1 Layer',\n     color: '#0073E6',\n     elements: [\n        {\n           title: 'Group 1',\n           // This 'viewTitle' will create a division in the menu that shows when the mouse hovers the navigation bar option 'This View has 2 Groups, each with 1 Layer' \n           viewTitle: 'Inner View with Group 1',\n           color: '#E6308A',\n           elements: [\n              {\n                 title: 'Group 1 - Layer 1',\n                 name: 'CSR:altimetria',\n                 source: 'local',\n                 visibility: true,\n              },\n           ],\n        },\n        {\n           title: 'Group 2',\n           // This 'viewTitle' will create a division in the menu that shows when the mouse hovers the navigation bar option 'This View has 2 Groups, each with 1 Layer'\n           viewTitle: 'Inner View with Group 2',\n           color: '#B51963',\n           elements: [\n              {\n                 title: 'Group 2 - Layer 1',\n                 name: 'CSR:batimetria',\n                 source: 'local',\n                 visibility: true,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "viewTitle",
        "description": "Define the Title of the View that will gather together the elements inside it (Groups or other Views).\nIf an external View has in its elements another definition of a 'viewTitle', subviews will be created, like in the second example.",
        "type": "String",
        "examples": [
          "// Exemple 1: View with a Layers inside it\n[\n  {\n     viewTitle: 'This View has a Group 3 Layers',\n     title: 'This is a Group with 3 Layers',\n     color: '#5BA300',\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:estados',\n           source: 'local',\n           opacity: 0.5,\n           visibility: true,\n        },\n        {\n           title: 'Layer 2',\n           name: 'CSR:rios_principais',\n           source: 'local',\n           opacity: 0.5,\n           visibility: true,\n        },\n        {\n           title: 'Layer 3',\n           name: 'CSR:geologia',\n           source: 'local',\n           opacity: 0.65,\n           visibility: true,\n        },\n     ],\n  },\n]",
          "// Exemple 2: View with others 'viewTitle' defined inside it\n[\n  {\n     // This is the definition of the View\n     viewTitle: 'This External View has 2 others Inner Views inside it, each with 1 Group that has 1 Layer',\n     title: 'This View has 2 Groups, each with 1 Layer',\n     color: '#0073E6',\n     elements: [\n        {\n           title: 'Group 1',\n           // This 'viewTitle' will create a division in the menu that shows when the mouse hovers the navigation bar option 'This View has 2 Groups, each with 1 Layer' \n           viewTitle: 'Inner View with Group 1',\n           color: '#E6308A',\n           elements: [\n              {\n                 title: 'Group 1 - Layer 1',\n                 name: 'CSR:altimetria',\n                 source: 'local',\n                 visibility: true,\n              },\n           ],\n        },\n        {\n           title: 'Group 2',\n           // This 'viewTitle' will create a division in the menu that shows when the mouse hovers the navigation bar option 'This View has 2 Groups, each with 1 Layer'\n           viewTitle: 'Inner View with Group 2',\n           color: '#B51963',\n           elements: [\n              {\n                 title: 'Group 2 - Layer 1',\n                 name: 'CSR:batimetria',\n                 source: 'local',\n                 visibility: true,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      }
    ],
    "GroupFunctions": [
      {
        "key": "_information",
        "description": "You can also define the following functions for a Group:",
        "name": "Groups Functions"
      },
      {
        "key": "onClickViewGroup",
        "description": "This function is called whenever the user clicks the 'viewTitle' text.\nPS: view.expanded is 'True' when thee View its openned or 'False' otherwise.\n@param view {Object} Is the view that was clicked\n@param clickEvent {MouseEvent} Is the object that carries more information about the click event.",
        "type": "function",
        "examples": [
          "[\n  {\n     viewTitle: 'Example View (Click me!)',\n     viewColor: '#FFA500',\n     title: 'Click the view to change its state',\n     color: '#666699',\n     openGroup: true,\n     onClickViewGroup: function handleClickViewGroup(view, clickEvent) {\n        let viewState = (view.expanded ? 'open' : 'closed');\n        ExtjsUtils.ALERTIFY.log('The ' + view.text + ' is ' + viewState );\n     },\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:estados',\n           source: 'local',\n           startListed: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "onToggleViewGroup",
        "description": "This function is called whenever the state of the group view changes. I.e. when the view  is collapsed or expanded.\nPS: view.expanded is 'True' when thee View its openned or 'False' otherwise.\n@param view {Object} Is the view that has its state changed",
        "type": "function",
        "examples": [
          "[\n  {\n     viewTitle: 'Example View (Click me!)',\n     viewColor: '#FFA500',\n     title: 'Click the view to change its state',\n     color: '#666699',\n     openGroup: true,\n     onToggleViewGroup: function handleToggleViewGroup(view) {\n        let viewState = (view.expanded ? 'open' : 'closed');\n        ExtjsUtils.ALERTIFY.log('The ' + view.text + ' is ' + viewState );\n     },\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:estados',\n           source: 'local',\n           startListed: true,\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      }
    ]
  },
  "Tools": {
    "_information": {
      "description": "Tools that can be used to create interactions or load data to the application, they must be used in descriptionHtml and its parameters should be passed preceded by vertical bars. \nExamples:",
      "example": "{\n    ...,\n    descriptionHtml: '\\{\\{toolIdentifier|paramName=paramValue\\}\\}',\n    ...\n}\n\n{\n    ...,\n    descriptionHtml: '\\{\\{button|id=btn_id|enableToggle=false\\}\\}' + '\\{\\{opacityslider\\}\\}',\n    ...\n}"
    },
    "Button": [
      {
        "key": "_information",
        "completeAPI": "This button is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.Button' target='_blank'>Button.Configs</a>.\nOnly some properties are listed in <a href='/api/#category_Button'>API here</a>.",
        "description": "Create a simple button to user interact with the map.",
        "name": "Button tool"
      },
      {
        "key": "enableToggle",
        "description": "Defines the button type as toggle.\nSet true to use as toggle, false otherwise.\nPS: When its true the callback is 'toggleHandler', otherwise the callback is 'handler'.",
        "type": "Boolean",
        "examples": [
          "|enableToggle=true|"
        ],
        "default": "false"
      },
      {
        "key": "enableToggle",
        "description": "Defines the button type as toggle.\nSet true to use as toggle, false otherwise.\nPS: When its true the callback is 'toggleHandler', otherwise the callback is 'handler'.",
        "type": "Boolean",
        "examples": [
          "|enableToggle=true|"
        ],
        "default": "false"
      },
      {
        "key": "fieldLabel",
        "description": "Defines the button label.",
        "type": "String",
        "examples": [
          "|fieldLabel=A button|"
        ]
      },
      {
        "key": "fieldLabel",
        "description": "Defines the button label.",
        "type": "String",
        "examples": [
          "|fieldLabel=A button|"
        ]
      },
      {
        "key": "handler",
        "description": "Defines the callback function on button click event. This should be used\nwhen the enableToggle property is false.\n@param button {Ext.Button} The button element that was clicked.\n@param clickEvent {EventObject} An event object carrying information about the click event.",
        "type": "function",
        "examples": [
          "|handler = function (button, clickEvent){\n console.log(button, clickEvent);\n}|"
        ],
        "default": "undefined"
      },
      {
        "key": "handler",
        "description": "Defines the callback function on button click event. This should be used\nwhen the enableToggle property is false.\n@param button {Ext.Button} The button element that was clicked.\n@param clickEvent {EventObject} An event object carrying information about the click event.",
        "type": "function",
        "examples": [
          "|handler = function (button, clickEvent){\n console.log(button, clickEvent);\n}|"
        ],
        "default": "undefined"
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=exemple_button|"
        ]
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=exemple_button|"
        ]
      },
      {
        "key": "pressed",
        "description": "Defines the button initial state. \nSet it true to start pressed (only if enableToggle = true), false otherwise.",
        "type": "Boolean",
        "examples": [
          "|pressed=true|"
        ],
        "default": "false"
      },
      {
        "key": "pressed",
        "description": "Defines the button initial state. \nSet it true to start pressed (only if enableToggle = true), false otherwise.",
        "type": "Boolean",
        "examples": [
          "|pressed=true|"
        ],
        "default": "false"
      },
      {
        "key": "text",
        "description": "Defines the button text.",
        "type": "String",
        "examples": [
          "|text=Click On Me|"
        ]
      },
      {
        "key": "text",
        "description": "Defines the button text.",
        "type": "String",
        "examples": [
          "|text=Click On Me|"
        ]
      },
      {
        "key": "toggleHandler",
        "description": "Defines the callback function on button toggle event. This should be used\nwhen the enableToggle property is true.\n@param button {Ext.Button} The button element that was clicked.\n@param state {Boolean} The next state of the button, true means pressed.",
        "type": "function",
        "examples": [
          "|toggleHandler = function (button, pressed){\n console.log(button, pressed);\n}|"
        ],
        "default": "undefined"
      },
      {
        "key": "toggleHandler",
        "description": "Defines the callback function on button toggle event. This should be used\nwhen the enableToggle property is true.\n@param button {Ext.Button} The button element that was clicked.\n@param state {Boolean} The next state of the button, true means pressed.",
        "type": "function",
        "examples": [
          "|toggleHandler = function (button, pressed){\n console.log(button, pressed);\n}|"
        ],
        "default": "undefined"
      }
    ],
    "Combobox": [
      {
        "key": "_information",
        "completeAPI": "This button is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.ComboBox' target='_blank'>Ext.form.ComboBox</a> for customized properties click on <a href='/api/#category_Combobox'>API here</a>.",
        "description": "It creates an input of ComboBox tool where the value is selectable from a list.\nUsage: '\\{\\combobox\\}\\}' or <a href='/elements/combobox-widget/'>examples</a>.",
        "name": "Combobox tool"
      },
      {
        "key": "data",
        "description": "Defines the data that will be displayed in the Combobox.",
        "type": "Array.<Array.<String>>",
        "examples": [
          "|data = [[\"Val_1\"], [\"Val_2\"],..]|"
        ],
        "default": "undefined"
      },
      {
        "key": "data",
        "description": "Defines the data that will be displayed in the Combobox.",
        "type": "Array.<Array.<String>>",
        "examples": [
          "|data = [[\"Val_1\"], [\"Val_2\"],..]|"
        ],
        "default": "undefined"
      },
      {
        "key": "editable",
        "description": "Determines if the Combobox is editable. That is, if it allows the user to type inside the input field.\nSet it true to allow it, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|editable=true|"
        ],
        "default": "false"
      },
      {
        "key": "editable",
        "description": "Determines if the Combobox is editable. That is, if it allows the user to type inside the input field.\nSet it true to allow it, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|editable=true|"
        ],
        "default": "false"
      },
      {
        "key": "fieldLabel",
        "description": "Defines a label for the Combobox.\nIt will be shown at the left of the Combobox, by default.",
        "type": "String",
        "examples": [
          "|fieldLabel=This is the field label|"
        ]
      },
      {
        "key": "fieldLabel",
        "description": "Defines a label for the Combobox.\nIt will be shown at the left of the Combobox, by default.",
        "type": "String",
        "examples": [
          "|fieldLabel=This is the field label|"
        ]
      },
      {
        "key": "hideLabel",
        "description": "Defines if the label of the Combobox should be displayed.\nSet true to hide the label, false to show it.",
        "type": "Boolean",
        "examples": [
          "|hideLabel=true|"
        ],
        "default": "false"
      },
      {
        "key": "hideLabel",
        "description": "Defines if the label of the Combobox should be displayed.\nSet true to hide the label, false to show it.",
        "type": "Boolean",
        "examples": [
          "|hideLabel=true|"
        ],
        "default": "false"
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=legend_combobox|"
        ]
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=legend_combobox|"
        ]
      },
      {
        "key": "labelStyle",
        "description": "Defines the style of the label.\nYou can use CSS to style the label element.",
        "type": "String",
        "examples": [
          "|labelStyle=font-weight: bold; color: red;|"
        ]
      },
      {
        "key": "labelStyle",
        "description": "Defines the style of the label.\nYou can use CSS to style the label element.",
        "type": "String",
        "examples": [
          "|labelStyle=font-weight: bold; color: red;|"
        ]
      }
    ],
    "Hoverpixel": [
      {
        "key": "_information",
        "completeAPI": "View the complete HoverPixel <a href='/api/#category_Hoverpixel'>API here</a>.",
        "description": "Create a tool to instantly inspect pixel under mouse. The value of the map can also be used as input for another functions.\nUsage: \\{\\{hoverpixel\\}\\}",
        "name": "HoverPixel tool"
      },
      {
        "key": "checked",
        "description": "Defines if the hoverPixel should start enabled.\nSet true to start enabled, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|checked = true|"
        ],
        "default": "false"
      },
      {
        "key": "checked",
        "description": "Defines if the hoverPixel should start enabled.\nSet true to start enabled, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|checked = true|"
        ],
        "default": "false"
      },
      {
        "key": "fieldLabel",
        "description": "Define the text that will be displayed at the left of the toggler",
        "type": "String",
        "examples": [
          "|text=This is the label text|"
        ]
      },
      {
        "key": "fieldLabel",
        "description": "Define the text that will be displayed at the left of the toggler",
        "type": "String",
        "examples": [
          "|text=This is the label text|"
        ]
      },
      {
        "key": "hideLabel",
        "description": "Defines if the label of the HoverPixel should be displayed.\nSet true to hide the label, false to show it.",
        "type": "Boolean",
        "examples": [
          "|hideLabel=true|"
        ],
        "default": "false"
      },
      {
        "key": "hideLabel",
        "description": "Defines if the label of the HoverPixel should be displayed.\nSet true to hide the label, false to show it.",
        "type": "Boolean",
        "examples": [
          "|hideLabel=true|"
        ],
        "default": "false"
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=exemple_hover_pixel|"
        ]
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=exemple_hover_pixel|"
        ]
      },
      {
        "key": "labelStyle",
        "description": "Defines the style of the label at the HoverPixel toggler.\nYou can use CSS to style the label element.",
        "type": "String",
        "examples": [
          "|labelStyle=font-weight: bold; color: red;|"
        ]
      },
      {
        "key": "labelStyle",
        "description": "Defines the style of the label at the HoverPixel toggler.\nYou can use CSS to style the label element.",
        "type": "String",
        "examples": [
          "|labelStyle=font-weight: bold; color: red;|"
        ]
      },
      {
        "key": "runOnClick",
        "description": "Defines a callback when the user clicks on the map.\n\nIt passes the following parameters for the callback function:\nhandleOnClick(layerVals, inputs, coordinates, clickEvent, lastCoordinates)\n@param layerVals {Array} Array with the values of the maps at the pixel that was clicked.\n@param inputs {Array} Array with the values of the inputs defined in the descriptionHtml.\n@param coordinates {Object} Array with the coordinates (latitude, longitude) of the pixel that was clicked.\n coordinates = {\n     lat: // Latitude of the pixel that was clicked\n     lon: // Longitude of the pixel that was clicked \n }\n@param clickEvent {MouseEvent} Mouse event that triggered the function.\n@param lastCoordinates {Object} Object with the last coordinates (latitude, longitude) from the last click and the last hover events.\n lastCoordinates = {\n     click: {\n           lat: // Latitude of the last click\n           lon: // Longitude of the last click\n     },\n     hover: {\n           lat: // Latitude of the last hover\n           lon: // Longitude of the last hover\n     }\n }",
        "type": "function",
        "examples": [
          "|handleOnClick: function(layerVals, inputs, coordinates, clickEvent, lastCoordinates) {\n     ExtjsUtils.ALERTIFY.log(\"Latitude: \" + coordinates.lat + \" Longitude: \" + coordinates.lon);\n}|"
        ],
        "default": "undefined"
      },
      {
        "key": "runOnClick",
        "description": "Defines a callback when the user clicks on the map.\n\nIt passes the following parameters for the callback function:\nhandleOnClick(layerVals, inputs, coordinates, clickEvent, lastCoordinates)\n@param layerVals {Array} Array with the values of the maps at the pixel that was clicked.\n@param inputs {Array} Array with the values of the inputs defined in the descriptionHtml.\n@param coordinates {Object} Array with the coordinates (latitude, longitude) of the pixel that was clicked.\n coordinates = {\n     lat: // Latitude of the pixel that was clicked\n     lon: // Longitude of the pixel that was clicked \n }\n@param clickEvent {MouseEvent} Mouse event that triggered the function.\n@param lastCoordinates {Object} Object with the last coordinates (latitude, longitude) from the last click and the last hover events.\n lastCoordinates = {\n     click: {\n           lat: // Latitude of the last click\n           lon: // Longitude of the last click\n     },\n     hover: {\n           lat: // Latitude of the last hover\n           lon: // Longitude of the last hover\n     }\n }",
        "type": "function",
        "examples": [
          "|handleOnClick: function(layerVals, inputs, coordinates, clickEvent, lastCoordinates) {\n     ExtjsUtils.ALERTIFY.log(\"Latitude: \" + coordinates.lat + \" Longitude: \" + coordinates.lon);\n}|"
        ],
        "default": "undefined"
      },
      {
        "key": "runOnClickOutside",
        "description": "True to run the callback function even when clicking outside of the layer, False to disable. (Default False)",
        "type": "function"
      },
      {
        "key": "runOnClickOutside",
        "description": "True to run the callback function even when clicking outside of the layer, False to disable. (Default False)",
        "type": "function"
      },
      {
        "key": "runOnHover",
        "description": "Defines a callback when the user hovers the map.\n\nIt passes the following parameters for the callback function:\nhandleOnClick(layerVals, inputs, coordinates, clickEvent, lastCoordinates)\n@param layerVals {Array} Array with the values of the maps at the pixel that was hovered.\n@param inputs {Array} Array with the values of the inputs defined in the descriptionHtml.\n@param coordinates {Object} Array with the coordinates (latitude, longitude) of the pixel that was hovered.\n coordinates = {\n     lat: // Latitude of the pixel that was hovered\n     lon: // Longitude of the pixel that was hovered \n }\n@param mouseMoveEvent {MouseEvent} Mouse event that triggered the function.\n@param lastCoordinates {Object} Object with the last coordinates (latitude, longitude) from the last click and the last hover events.\n lastCoordinates = {\n     click: {\n           lat: // Latitude of the last click\n           lon: // Longitude of the last click\n     },\n     hover: {\n           lat: // Latitude of the last hover\n           lon: // Longitude of the last hover\n     }\n }",
        "type": "function",
        "examples": [
          "|handleOnHover: function(layerVals, inputs, coordinates, mouseMoveEvent, lastCoordinates) {\n     ExtjsUtils.ALERTIFY.log(\"Latitude: \" + coordinates.lat + \" Longitude: \" + coordinates.lon);\n}|"
        ],
        "default": "undefined"
      },
      {
        "key": "runOnHover",
        "description": "Defines a callback when the user hovers the map.\n\nIt passes the following parameters for the callback function:\nhandleOnClick(layerVals, inputs, coordinates, clickEvent, lastCoordinates)\n@param layerVals {Array} Array with the values of the maps at the pixel that was hovered.\n@param inputs {Array} Array with the values of the inputs defined in the descriptionHtml.\n@param coordinates {Object} Array with the coordinates (latitude, longitude) of the pixel that was hovered.\n coordinates = {\n     lat: // Latitude of the pixel that was hovered\n     lon: // Longitude of the pixel that was hovered \n }\n@param mouseMoveEvent {MouseEvent} Mouse event that triggered the function.\n@param lastCoordinates {Object} Object with the last coordinates (latitude, longitude) from the last click and the last hover events.\n lastCoordinates = {\n     click: {\n           lat: // Latitude of the last click\n           lon: // Longitude of the last click\n     },\n     hover: {\n           lat: // Latitude of the last hover\n           lon: // Longitude of the last hover\n     }\n }",
        "type": "function",
        "examples": [
          "|handleOnHover: function(layerVals, inputs, coordinates, mouseMoveEvent, lastCoordinates) {\n     ExtjsUtils.ALERTIFY.log(\"Latitude: \" + coordinates.lat + \" Longitude: \" + coordinates.lon);\n}|"
        ],
        "default": "undefined"
      },
      {
        "key": "runOnHoverOutside",
        "description": "True to run the callback function even when hovering outside of the layer, False to disable. (Default False)",
        "type": "function"
      },
      {
        "key": "runOnHoverOutside",
        "description": "True to run the callback function even when hovering outside of the layer, False to disable. (Default False)",
        "type": "function"
      },
      {
        "key": "text",
        "description": "Define the text that will be displayed at the right of the toggler",
        "type": "String",
        "examples": [
          "|text=This is the example text|"
        ]
      },
      {
        "key": "text",
        "description": "Define the text that will be displayed at the right of the toggler",
        "type": "String",
        "examples": [
          "|text=This is the example text|"
        ]
      }
    ],
    "LegendHtml": [
      {
        "key": "_information",
        "description": "Create a tool with the map legends at any place of the query description.\nUsage: '\\{\\{legendhtml\\}\\}'",
        "name": "Legend"
      },
      {
        "key": "filterLayers",
        "description": "Defines an array of indexes of layers to be included in map legend (from 0 to quantity of layers).\nIf not defined, all layer legends are shown by default. Otherwise, only the listed indexes are included.\n\nEx: A composed layer with three maps:\nname: \"CSR:estados,CSR:roads,CSR:municipalities\",\nIf 'filterLayers=[0,1]' is defined in the layer object only the legends of 'CSR:estatdos' and 'CSR:roads' are shown.",
        "type": "Array.<Number>",
        "examples": [
          "|filterLayers = [1,2]|"
        ],
        "default": "null"
      },
      {
        "key": "filterLayers",
        "description": "Defines an array of indexes of layers to be included in map legend (from 0 to quantity of layers).\nIf not defined, all layer legends are shown by default. Otherwise, only the listed indexes are included.\n\nEx: A composed layer with three maps:\nname: \"CSR:estados,CSR:roads,CSR:municipalities\",\nIf 'filterLayers=[0,1]' is defined in the layer object only the legends of 'CSR:estatdos' and 'CSR:roads' are shown.",
        "type": "Array.<Number>",
        "examples": [
          "|filterLayers = [1,2]|"
        ],
        "default": "null"
      },
      {
        "key": "legendId",
        "description": "Defines the legend container id. You can use this id to toggle each legend filter individually.",
        "type": "String",
        "examples": [
          "|legendId=WIDGET_OBJECT_ID|"
        ],
        "default": "null"
      },
      {
        "key": "legendId",
        "description": "Defines the legend container id. You can use this id to toggle each legend filter individually.",
        "type": "String",
        "examples": [
          "|legendId=WIDGET_OBJECT_ID|"
        ],
        "default": "null"
      },
      {
        "key": "preventClick",
        "description": "Defines if the user can filter the maps categories by clicking on the legend.\nSet it true to ignore the legend click, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|preventClick = true|"
        ],
        "default": "false"
      },
      {
        "key": "preventClick",
        "description": "Defines if the user can filter the maps categories by clicking on the legend.\nSet it true to ignore the legend click, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|preventClick = true|"
        ],
        "default": "false"
      },
      {
        "key": "reverseLegend",
        "description": "Defines if it should sort the legend on the decreasing order.\nSet it true to use the decreasing order, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|reverseLegend = true|"
        ],
        "default": "false"
      },
      {
        "key": "reverseLegend",
        "description": "Defines if it should sort the legend on the decreasing order.\nSet it true to use the decreasing order, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|reverseLegend = true|"
        ],
        "default": "false"
      }
    ],
    "OpacitySlider": [
      {
        "key": "_information",
        "description": "Create a slider to change the map opacity.\nUsage: '\\{\\{opacityslider\\}\\}'",
        "name": "Opacity slider tool"
      }
    ],
    "LoadCsv": [
      {
        "key": "_information",
        "completeAPI": "View the complete LoadCSV <a href='/api/#category_LoadCsv'>API here</a>.",
        "description": "Describes the API to read and manipulate ExtjsUtils.CSV.CsvTable files from URL.",
        "name": "Csv manager tool"
      },
      {
        "key": "columnNameToInd",
        "description": "Get the index of a column with the 'columnName' name.\n@param columnName {String} Column name to search for.",
        "type": "function(columnName) : Number",
        "returnDescription": "When it exists returns the column index, otherwise -1."
      },
      {
        "key": "columnNameToInd",
        "description": "Get the index of a column with the 'columnName' name.\n@param columnName {String} Column name to search for.",
        "type": "function(columnName) : Number",
        "returnDescription": "When it exists returns the column index, otherwise -1."
      },
      {
        "key": "getLines",
        "description": "Get all lines that 'column' has the value equals to 'value'.\n\nPS: To use the 'column' as index, it must be numeric, when the 'column' is a text the index is searched on header by its name.\nPS2: To filter multiple column each value and index one must be added to the 'columns' and 'values' arrays.\nEx: ([1,4,2], [\"FIRST_COLUMN_VALUE\",\"FORTH_COLUMN_VALUE\", SECOND_COLUMN_VALUE])\n@param columns {Array} (Optional) Array of indexes/names of the filtered columns.\n@param values {Array} {Opcional) Array of values to match each column.",
        "type": "function(columns, values) : Array",
        "returnDescription": "If the parameters 'column' and 'value' aren't defined return all lines, otherwise returns only the matched lines."
      },
      {
        "key": "getLines",
        "description": "Get all lines that 'column' has the value equals to 'value'.\n\nPS: To use the 'column' as index, it must be numeric, when the 'column' is a text the index is searched on header by its name.\nPS2: To filter multiple column each value and index one must be added to the 'columns' and 'values' arrays.\nEx: ([1,4,2], [\"FIRST_COLUMN_VALUE\",\"FORTH_COLUMN_VALUE\", SECOND_COLUMN_VALUE])\n@param columns {Array} (Optional) Array of indexes/names of the filtered columns.\n@param values {Array} {Opcional) Array of values to match each column.",
        "type": "function(columns, values) : Array",
        "returnDescription": "If the parameters 'column' and 'value' aren't defined return all lines, otherwise returns only the matched lines."
      },
      {
        "key": "getValue",
        "description": "Get a value by the matrix index and column.\n@param column {Number} Column index (First index is 0).\n@param line {Number} Line index (First index is 0).\n@param includeHeader {boolean} True to include the header line in the matrix index, False to ignore.",
        "type": "function(column, line, includeHeader) : String",
        "returnDescription": "Get the cell value."
      },
      {
        "key": "getValue",
        "description": "Get a value by the matrix index and column.\n@param column {Number} Column index (First index is 0).\n@param line {Number} Line index (First index is 0).\n@param includeHeader {boolean} True to include the header line in the matrix index, False to ignore.",
        "type": "function(column, line, includeHeader) : String",
        "returnDescription": "Get the cell value."
      },
      {
        "key": "setValue",
        "description": "Change a cell value by its cell index.\n@param column {Numeric} Column index.\n@param line {Numeric} Line index to change (ignore the header information when it exists).\n@param value {*} New value to replace the older value.",
        "type": "function(column, line, value)"
      },
      {
        "key": "setValue",
        "description": "Change a cell value by its cell index.\n@param column {Numeric} Column index.\n@param line {Numeric} Line index to change (ignore the header information when it exists).\n@param value {*} New value to replace the older value.",
        "type": "function(column, line, value)"
      }
    ],
    "Slider": [
      {
        "key": "_information",
        "completeAPI": "View the complete Slider <a href='/api/#category_Slider'>API here</a>.",
        "description": "Tool that allows users to create a slider that the user can drag and change its value as map input.",
        "name": "Slider tool"
      },
      {
        "key": "backgroundColors",
        "description": "Array of colors of background slider values, to define background slider color based in slider value.\nThe values are defined from most to minimum with two properties each:\n  - color: {String} CSS color definition for the current interval. i.e. 'red','black','#FF0000', '#000000'.\n  - startValue: {Numeric} If defined define the initial value which above will apply this color, otherwise use theminimum slider value as default.\n\nEx.:\n backgroundColors: [\n     {\n         // Define background color to red when slider has value above 75.\n         color: \"red\",\n         startValue: 75\n     },\n     {\n         // Define background color starting from value 0.\n         // That results two intervals, from 0 to 75 as blue, and from 76 to 100 as red.\n         color: \"blue\",\n         startValue: 0\n     }\n ]",
        "type": "Array.<String>"
      },
      {
        "key": "backgroundColors",
        "description": "Array of colors of background slider values, to define background slider color based in slider value.\nThe values are defined from most to minimum with two properties each:\n  - color: {String} CSS color definition for the current interval. i.e. 'red','black','#FF0000', '#000000'.\n  - startValue: {Numeric} If defined define the initial value which above will apply this color, otherwise use theminimum slider value as default.\n\nEx.:\n backgroundColors: [\n     {\n         // Define background color to red when slider has value above 75.\n         color: \"red\",\n         startValue: 75\n     },\n     {\n         // Define background color starting from value 0.\n         // That results two intervals, from 0 to 75 as blue, and from 76 to 100 as red.\n         color: \"blue\",\n         startValue: 0\n     }\n ]",
        "type": "Array.<String>"
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=example_slider|"
        ]
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=example_slider|"
        ]
      },
      {
        "key": "increment",
        "description": "Defines the step of each increment or decrement in the actual value of the slider when being dragged.",
        "type": "Number",
        "examples": [
          "|increment = 10|"
        ]
      },
      {
        "key": "increment",
        "description": "Defines the step of each increment or decrement in the actual value of the slider when being dragged.",
        "type": "Number",
        "examples": [
          "|increment = 10|"
        ]
      },
      {
        "key": "maxValue",
        "description": "Defines the maximum value of the slider.",
        "type": "Number",
        "examples": [
          "|maxValue = 100|"
        ]
      },
      {
        "key": "maxValue",
        "description": "Defines the maximum value of the slider.",
        "type": "Number",
        "examples": [
          "|maxValue = 100|"
        ]
      },
      {
        "key": "minValue",
        "description": "Defines the minimum value of the slider.",
        "type": "Number",
        "examples": [
          "|minValue = 0|"
        ]
      },
      {
        "key": "minValue",
        "description": "Defines the minimum value of the slider.",
        "type": "Number",
        "examples": [
          "|minValue = 0|"
        ]
      },
      {
        "key": "value",
        "description": "Defines the initial value of the slider.",
        "type": "Number",
        "examples": [
          "|value = 100|"
        ]
      },
      {
        "key": "value",
        "description": "Defines the initial value of the slider.",
        "type": "Number",
        "examples": [
          "|value = 100|"
        ]
      },
      {
        "key": "values",
        "description": "Defines the slider interval limits.\nIf defined, the slider will be displayed as a range slider.\nIt's return at the 'inputs' parameter will be a array of two values.",
        "type": "Array.<Number>",
        "examples": [
          "|values = [0, 250]|",
          "|beforeCalc: function(inputs) {\n   let lowerValue = inputs[0][0]; // The value of the left drag\n   let upperValue = inputs[0][1]; // The value of the right drag\n}|"
        ]
      },
      {
        "key": "values",
        "description": "Defines the slider interval limits.\nIf defined, the slider will be displayed as a range slider.\nIt's return at the 'inputs' parameter will be a array of two values.",
        "type": "Array.<Number>",
        "examples": [
          "|values = [0, 250]|",
          "|beforeCalc: function(inputs) {\n   let lowerValue = inputs[0][0]; // The value of the left drag\n   let upperValue = inputs[0][1]; // The value of the right drag\n}|"
        ]
      }
    ],
    "Textfield": [
      {
        "key": "_information",
        "completeAPI": "This tool is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.TextField' target='_blank'>Ext.form,TextField</a>.\nOnly customized properties are <a href='/api/#category_Textfield'>listed here</a>.",
        "description": "Tool that allows the user to input a single line of text.\nUsage: '\\{\\{textfield\\}\\}'",
        "name": "Textfield tool"
      },
      {
        "key": "fieldLabel",
        "description": "Defines the TextField label.",
        "type": "String",
        "examples": [
          "|fieldLabel = This is the field label|"
        ]
      },
      {
        "key": "fieldLabel",
        "description": "Defines the TextField label.",
        "type": "String",
        "examples": [
          "|fieldLabel = This is the field label|"
        ]
      },
      {
        "key": "hideLabel",
        "description": "Defines if it should completely hide the label element (label and separator) of the TextField.\nThat is, if this property is set to true, the label will be hidden. Otherwise, the label will be shown by default.\nPS: Since the label will be shown by default, even if you do not specify a fieldLabel, the space for it will still be reserved so that the TextField will line up with other fields that do have labels. This space will be removed if you define it to be hidden.",
        "type": "Boolean",
        "examples": [
          "|hideLabel = true|"
        ],
        "default": "false"
      },
      {
        "key": "hideLabel",
        "description": "Defines if it should completely hide the label element (label and separator) of the TextField.\nThat is, if this property is set to true, the label will be hidden. Otherwise, the label will be shown by default.\nPS: Since the label will be shown by default, even if you do not specify a fieldLabel, the space for it will still be reserved so that the TextField will line up with other fields that do have labels. This space will be removed if you define it to be hidden.",
        "type": "Boolean",
        "examples": [
          "|hideLabel = true|"
        ],
        "default": "false"
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=example_text_field|"
        ]
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=example_text_field|"
        ]
      },
      {
        "key": "isnumeric",
        "description": "Defines the TextField content as numeric only.",
        "type": "boolean",
        "examples": [
          "|isnumeric=true|"
        ]
      },
      {
        "key": "isnumeric",
        "description": "Defines the TextField content as numeric only.",
        "type": "boolean",
        "examples": [
          "|isnumeric=true|"
        ]
      },
      {
        "key": "style",
        "description": "Defines the TextField style properties.\nYou can use CSS style rules to customize it.",
        "type": "String",
        "examples": [
          "|style = color:black;|"
        ]
      },
      {
        "key": "style",
        "description": "Defines the TextField style properties.\nYou can use CSS style rules to customize it.",
        "type": "String",
        "examples": [
          "|style = color:black;|"
        ]
      },
      {
        "key": "value",
        "description": "Defines the initial value to the TextField content.",
        "type": "String",
        "examples": [
          "|value = text|"
        ]
      },
      {
        "key": "value",
        "description": "Defines the initial value to the TextField content.",
        "type": "String",
        "examples": [
          "|value = text|"
        ]
      }
    ],
    "Label": [
      {
        "key": "_information",
        "completeAPI": "This label is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.Label' target='_blank'>Ext.form.Label</a>.\nOnly some properties are <a href='/api/#category_Label'>listed here</a>.",
        "description": "Create a simple label element to display some text.\nUsage: \\{\\{label|\\}\\}",
        "name": "Label"
      }
    ],
    "HTML": [
      {
        "key": "_information",
        "completeAPI": "",
        "description": "Any HTML is possible to be added to the layer description.",
        "name": "HTML contents"
      }
    ],
    "LoadJson": [
      {
        "key": "_information",
        "completeAPI": "",
        "description": "Tool to load a remote JSON and use it with map, this object can store string, values and functions.\nUsage: \\{\\{loadjson\\}\\}",
        "name": "LoadJson tool"
      }
    ],
    "PickPoint": [
      {
        "key": "_information",
        "completeAPI": "View the complete PickPoint <a href='/api/#category_PickPoint'>API here</a>",
        "description": "Creates an input that allows users to interact with the real cell or feature value at any position.\n\nThe returned values are from the original mal to the selected point,\n in case of RASTER is returned a cell value, in case of shapefile the geometry is returned too.\nUsage: \\{\\{pickpoint\\}\\}",
        "name": "PickPoint tool"
      },
      {
        "key": "checked",
        "description": "Defines if Pickpoint should start selected. \nSet it true to start it enabled, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|checked = false|"
        ],
        "default": "false"
      },
      {
        "key": "checked",
        "description": "Defines if Pickpoint should start selected. \nSet it true to start it enabled, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|checked = false|"
        ],
        "default": "false"
      },
      {
        "key": "fieldLabel",
        "description": "Sets the label for the 'pickpoint' button widget.",
        "type": "String",
        "examples": [
          "'Pick a point coordinate (Lat,Lon)'"
        ]
      },
      {
        "key": "fieldLabel",
        "description": "Sets the label for the 'pickpoint' button widget.",
        "type": "String",
        "examples": [
          "'Pick a point coordinate (Lat,Lon)'"
        ]
      },
      {
        "key": "geometryColor",
        "description": "If defined sets a color to use when drawing a geometry by this tool. Otherwise a random color will be used at each interaction.",
        "type": "String",
        "examples": [
          "|geometryColor=#FF00FF|"
        ],
        "default": "undefined"
      },
      {
        "key": "geometryColor",
        "description": "If defined sets a color to use when drawing a geometry by this tool. Otherwise a random color will be used at each interaction.",
        "type": "String",
        "examples": [
          "|geometryColor=#FF00FF|"
        ],
        "default": "undefined"
      },
      {
        "key": "markLayerInd",
        "description": "Defines by layer index which one to draw its geometry when a click event happens. (0-indexed)",
        "type": "Number",
        "examples": [
          "|markLayerInd = 0|"
        ]
      },
      {
        "key": "markLayerInd",
        "description": "Defines by layer index which one to draw its geometry when a click event happens. (0-indexed)",
        "type": "Number",
        "examples": [
          "|markLayerInd = 0|"
        ]
      },
      {
        "key": "notify",
        "description": "Set false to prevent the notify messages from appear.",
        "type": "Boolean",
        "default": "false"
      },
      {
        "key": "notify",
        "description": "Set false to prevent the notify messages from appear.",
        "type": "Boolean",
        "default": "false"
      },
      {
        "key": "onMark",
        "description": "Callback function called after clicking on a feature with this 'pickpoint' widget.\nP.S.: From 'this' keyword you can access the pickpoint properties.\n@param eventAndProperties {Object} A object with {mouse, features} passed into the callback function:\n     - mouse: {PointerEvent} The mouse click event.\n     - features: {Array<Object>} An array of features representing the selected(s) feature(s).",
        "type": "function",
        "examples": [
          "{ ...\n \"descriptionHtml\": \"\\{\\{pickpoint|id=ANY_UNIQUE_ID|onMark=onMarkCallback\\}\\}\",\n  functions: {\n    onMarkCallback: function(event) {\n      for (var iLayer=0; iLayer < event.features.length; iLayer++) {\n        for (var iFeature=0; iFeature < event.features[iLayer].length; iFeature++) {\n          console.log(event.features[iLayer][iFeature].data);\n        }\n      }\n    }\n  }\n ...\n }"
        ]
      },
      {
        "key": "onMark",
        "description": "Callback function called after clicking on a feature with this 'pickpoint' widget.\nP.S.: From 'this' keyword you can access the pickpoint properties.\n@param eventAndProperties {Object} A object with {mouse, features} passed into the callback function:\n     - mouse: {PointerEvent} The mouse click event.\n     - features: {Array<Object>} An array of features representing the selected(s) feature(s).",
        "type": "function",
        "examples": [
          "{ ...\n \"descriptionHtml\": \"\\{\\{pickpoint|id=ANY_UNIQUE_ID|onMark=onMarkCallback\\}\\}\",\n  functions: {\n    onMarkCallback: function(event) {\n      for (var iLayer=0; iLayer < event.features.length; iLayer++) {\n        for (var iFeature=0; iFeature < event.features[iLayer].length; iFeature++) {\n          console.log(event.features[iLayer][iFeature].data);\n        }\n      }\n    }\n  }\n ...\n }"
        ]
      },
      {
        "key": "onefeature",
        "description": "Defines if PickPoint should keep only the last feature selected.\nSet it true to keep only the last one, false otherwise.",
        "type": "boolean",
        "examples": [
          "|onefeature = false|"
        ]
      },
      {
        "key": "onefeature",
        "description": "Defines if PickPoint should keep only the last feature selected.\nSet it true to keep only the last one, false otherwise.",
        "type": "boolean",
        "examples": [
          "|onefeature = false|"
        ]
      },
      {
        "key": "pointVisibility",
        "description": "Defines if Pickpoint should show where the last click was. \nSet it true to show, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|pointVisibility = false|"
        ],
        "default": "true"
      },
      {
        "key": "pointVisibility",
        "description": "Defines if Pickpoint should show where the last click was. \nSet it true to show, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|pointVisibility = false|"
        ],
        "default": "true"
      },
      {
        "key": "runOnHover",
        "description": "Defines a callback function to run when clicking at the map.\n\nDefines a callBack with following parameters function(mouseEvt, coordinates)\n--mouseEvt: {MouseEvent} Mouse hover event.\n--coordinates: {Openlayers.LatLon} Coordinate of the cursor over the map.\nPS: Can access the layer itself using the 'this' keyword.",
        "type": "function"
      },
      {
        "key": "runOnHover",
        "description": "Defines a callback function to run when clicking at the map.\n\nDefines a callBack with following parameters function(mouseEvt, coordinates)\n--mouseEvt: {MouseEvent} Mouse hover event.\n--coordinates: {Openlayers.LatLon} Coordinate of the cursor over the map.\nPS: Can access the layer itself using the 'this' keyword.",
        "type": "function"
      },
      {
        "key": "runOnHoverOutside",
        "description": "True to run the callback function even when hovering outside of the layer, False to disable. (Default False)",
        "type": "function"
      },
      {
        "key": "runOnHoverOutside",
        "description": "True to run the callback function even when hovering outside of the layer, False to disable. (Default False)",
        "type": "function"
      },
      {
        "key": "unselect",
        "description": "Set false to unselect after click on the geometry.",
        "type": "Boolean",
        "examples": [
          "|unselect=|"
        ],
        "default": "true"
      },
      {
        "key": "unselect",
        "description": "Set false to unselect after click on the geometry.",
        "type": "Boolean",
        "examples": [
          "|unselect=|"
        ],
        "default": "true"
      }
    ],
    "Timeline": [
      {
        "key": "_information",
        "examples": [
          "{{timeline|nextStepInterval=1000|id=ANY_UNIQUE_ID|steps=[[“01”, “January”], [“02”, “February”], [“March”], [“April”]]}}"
        ],
        "completeAPI": "View the complete Timeline <a href='/api/#category_Timeline'>API here</a>.",
        "description": "Display a spatial scenarios changes in a timeline.",
        "name": "Timeline tool"
      },
      {
        "key": "fieldLabel",
        "description": "Defines a label for the Timeline.\nIt will be shown at the left of the button to hide the tiemline, by default.",
        "type": "String",
        "examples": [
          "|fieldLabel=This is the field label|"
        ]
      },
      {
        "key": "fieldLabel",
        "description": "Defines a label for the Timeline.\nIt will be shown at the left of the button to hide the tiemline, by default.",
        "type": "String",
        "examples": [
          "|fieldLabel=This is the field label|"
        ]
      },
      {
        "key": "hideLabel",
        "description": "Defines if the label of the timeline should be displayed.\nSet true to hide the label, false to show it.",
        "type": "Boolean",
        "examples": [
          "|hideLabel=true|"
        ],
        "default": "false"
      },
      {
        "key": "hideLabel",
        "description": "Defines if the label of the timeline should be displayed.\nSet true to hide the label, false to show it.",
        "type": "Boolean",
        "examples": [
          "|hideLabel=true|"
        ],
        "default": "false"
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=exemple_timeline|"
        ]
      },
      {
        "key": "id",
        "description": "Defines the id to identify the object.",
        "type": "String",
        "examples": [
          "|id=exemple_timeline|"
        ]
      },
      {
        "key": "nextStepInterval",
        "description": "Defines the duration of the interval between steps of the timeline in milliseconds.",
        "type": "Number",
        "examples": [
          "|nextStepInterval=1000|"
        ],
        "default": "2100"
      },
      {
        "key": "nextStepInterval",
        "description": "Defines the duration of the interval between steps of the timeline in milliseconds.",
        "type": "Number",
        "examples": [
          "|nextStepInterval=1000|"
        ],
        "default": "2100"
      },
      {
        "key": "onPlayToggle",
        "description": "Defines the callback function called when the timeline starts/stops playing.\n@param pressed {Boolean} True if the button was pressed, False otherwise.\n@param layer {Object} The layer associated to this timeline.\n@param timeline {Object} The timeline associated.\n@param playBtn {Object} The button changed.",
        "type": "function",
        "examples": [
          "|onPlayToggle = function (pressed, layer, timeline, playBtn) {\n     let text = \"The timeline just \";\n     text += pressed ? \"stopped \" : \"started \";\n     text += \"playing!\";\n     console.log(text);\n}|"
        ]
      },
      {
        "key": "onPlayToggle",
        "description": "Defines the callback function called when the timeline starts/stops playing.\n@param pressed {Boolean} True if the button was pressed, False otherwise.\n@param layer {Object} The layer associated to this timeline.\n@param timeline {Object} The timeline associated.\n@param playBtn {Object} The button changed.",
        "type": "function",
        "examples": [
          "|onPlayToggle = function (pressed, layer, timeline, playBtn) {\n     let text = \"The timeline just \";\n     text += pressed ? \"stopped \" : \"started \";\n     text += \"playing!\";\n     console.log(text);\n}|"
        ]
      },
      {
        "key": "preloadTiles",
        "description": "Defines if the timeline should preload the tiles of the next steps to get smoother transitions.\nSet it true to preload, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|preloadTiles = true|"
        ],
        "default": "false"
      },
      {
        "key": "preloadTiles",
        "description": "Defines if the timeline should preload the tiles of the next steps to get smoother transitions.\nSet it true to preload, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|preloadTiles = true|"
        ],
        "default": "false"
      },
      {
        "key": "renderHidden",
        "description": "Defines the timeline initial visibility.\nSet it true to start with the timeline hidden, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|renderHidden = true|"
        ],
        "default": "false"
      },
      {
        "key": "renderHidden",
        "description": "Defines the timeline initial visibility.\nSet it true to start with the timeline hidden, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|renderHidden = true|"
        ],
        "default": "false"
      },
      {
        "key": "steps",
        "description": "Defines the timeline change steps.",
        "type": "Array.<Array.<(String|Object)>>",
        "examples": [
          "|steps=[[\"step_0\"], [\"step_1\"], [\"step_2\"]]|",
          "|steps=[['Nome', {style:\"step_0_style\",name:\"CSR:estados\"}], ['Região', {style:\"step_1_style\",name:\"CSR:estados\"}], ['Geocódigo', {style:\"step_2_style\",name:\"CSR:estados\"}]]|",
          "|steps=[['Nome', 'step_0'], ['Região', 'step_1'], ['Geocódigo', 'step_2']]|",
          "|steps=[{1990: \"layer_style0\", 1991: \"layer_style1\", 1992: \"layer_style2\"}, 1993: \"layer_style3\"}]|"
        ]
      },
      {
        "key": "steps",
        "description": "Defines the timeline change steps.",
        "type": "Array.<Array.<(String|Object)>>",
        "examples": [
          "|steps=[[\"step_0\"], [\"step_1\"], [\"step_2\"]]|",
          "|steps=[['Nome', {style:\"step_0_style\",name:\"CSR:estados\"}], ['Região', {style:\"step_1_style\",name:\"CSR:estados\"}], ['Geocódigo', {style:\"step_2_style\",name:\"CSR:estados\"}]]|",
          "|steps=[['Nome', 'step_0'], ['Região', 'step_1'], ['Geocódigo', 'step_2']]|",
          "|steps=[{1990: \"layer_style0\", 1991: \"layer_style1\", 1992: \"layer_style2\"}, 1993: \"layer_style3\"}]|"
        ]
      }
    ],
    "InputManager": [
      {
        "key": "_information",
        "completeAPI": "View the complete InputManager <a href='/api/#category_InputManager'>API here</a>.",
        "description": "Tool to store local variables to be used in others functions callbacks.\nPS: DOM elements cannot be used in 'expression' context, because them cannot be sent to WebWorkers (javascript language limitation).\nUsage: '\\{\\{inputmanager\\}\\}'",
        "name": "InputManager tool"
      },
      {
        "key": "forceRecalc",
        "description": "Force a legend map recalculation.",
        "type": "function()"
      },
      {
        "key": "forceRecalc",
        "description": "Force a legend map recalculation.",
        "type": "function()"
      },
      {
        "key": "getValue",
        "description": "Get the stored value by his property name, if it does not exists returns null.\n@param key {String} Stored property name.",
        "type": "function(key) : *",
        "returnDescription": "Desired stored property when it exists or null otherwise."
      },
      {
        "key": "getValue",
        "description": "Get the stored value by his property name, if it does not exists returns null.\n@param key {String} Stored property name.",
        "type": "function(key) : *",
        "returnDescription": "Desired stored property when it exists or null otherwise."
      },
      {
        "key": "setValues",
        "description": "Stores object properties for later usage.\n\nPS: If has name property collision the older is replaced.\n@param obj {Object} Object with the properties to be stored.\n@param cancelUpdate {Boolean} False if this change must cause layer recalculation, True otherwise.\n@param local {Boolean} True to store the property locally, False otherwise. The local properties aren't sent to 'expression' calbacks. (i.e. If a element is recursive or have DOM elements, it must local avoid stringify errors on 'expression' callbacks)",
        "type": "function(obj, cancelUpdate, local)"
      },
      {
        "key": "setValues",
        "description": "Stores object properties for later usage.\n\nPS: If has name property collision the older is replaced.\n@param obj {Object} Object with the properties to be stored.\n@param cancelUpdate {Boolean} False if this change must cause layer recalculation, True otherwise.\n@param local {Boolean} True to store the property locally, False otherwise. The local properties aren't sent to 'expression' calbacks. (i.e. If a element is recursive or have DOM elements, it must local avoid stringify errors on 'expression' callbacks)",
        "type": "function(obj, cancelUpdate, local)"
      }
    ],
    "FileField": [
      {
        "key": "_information",
        "completeAPI": "View all FileField documentation <a href='/api/#category_FileField'>API here</a>.",
        "description": "Tool that allows handle and local files.\nPS: This object cannot be sent to 'expression'.\nUsage: \\{\\{filefield|fieldLabel=loadshp|id=loadshp|_onChange=function(){alert('changed')}\\}\\}",
        "name": "FileField tool"
      },
      {
        "key": "eventNames",
        "description": "Defines the list of events by name.\nUse this property to define callback functions to any of the following events.",
        "type": "Array.<string>",
        "examples": [
          "['added', 'afterrender', 'beforedestroy', 'beforehide', 'beforerender', 'beforeshow', 'beforestaterestore',\n'beforestatesave', 'blur', 'change', 'destroy', 'disable', 'enable', 'focus', 'hide', 'invalid', 'move', 'removed', 'render',\n'resize', 'show', 'specialkey', 'staterestore', 'statesave', 'valid']"
        ]
      },
      {
        "key": "eventNames",
        "description": "Defines the list of events by name.\nUse this property to define callback functions to any of the following events.",
        "type": "Array.<string>",
        "examples": [
          "['added', 'afterrender', 'beforedestroy', 'beforehide', 'beforerender', 'beforeshow', 'beforestaterestore',\n'beforestatesave', 'blur', 'change', 'destroy', 'disable', 'enable', 'focus', 'hide', 'invalid', 'move', 'removed', 'render',\n'resize', 'show', 'specialkey', 'staterestore', 'statesave', 'valid']"
        ]
      },
      {
        "key": "ignoreUpdate",
        "description": "Defines if it should ignore the widget change event.\nIf it's false, it dispatches the update event at every file selection.",
        "type": "Boolean",
        "default": "false"
      },
      {
        "key": "ignoreUpdate",
        "description": "Defines if it should ignore the widget change event.\nIf it's false, it dispatches the update event at every file selection.",
        "type": "Boolean",
        "default": "false"
      }
    ],
    "SummedArea": [
      {
        "key": "_information",
        "completeAPI": "View the complete SummedArea <a href='/api/#category_Slider'>API here</a>.",
        "description": "Create an input of summation in any arbitrary area.\n\nCallBack parameters (context {OpenLayers.Layer}, layersValues {Array[Number]}, inputs {[Object]}, feature {Geometry})\nrunOnClick {Function}  Callback called exactly after sum the map region.,\n\nPS: 'layersValues' return the sum of each internal layer and an adittional value which is the sum of all pixels of resulting layer.",
        "name": "Summed Area tool"
      },
      {
        "key": "description",
        "description": "Creates an input of summatory in any arbitrary area.\n\nCallBack parameters (context {OpenLayers.Layer}, layersValues {Array[Number]}, inputs {[Object]}, feature {Geometry})\nrunOnClick {Function} Callback called exactly after sum the map region.,\n\nPS: 'layersValues' return the sum of each internal layer and an adittional value which is the sum of all pixels of resulting layer.\n@param name {String} Input name \"summedarea\".\n@param config {Object} Properties to customize the element.\n@param layer {OpenLayers.Layer} Layer which the widget is defined.\n@param parameters {Array} Array de parametros antes do processamento para o input.",
        "type": "function(name, config, layer, parameters) : Ext.Container",
        "returnDescription": "Returns an instance of summedarea Input."
      },
      {
        "key": "description",
        "description": "Creates an input of summatory in any arbitrary area.\n\nCallBack parameters (context {OpenLayers.Layer}, layersValues {Array[Number]}, inputs {[Object]}, feature {Geometry})\nrunOnClick {Function} Callback called exactly after sum the map region.,\n\nPS: 'layersValues' return the sum of each internal layer and an adittional value which is the sum of all pixels of resulting layer.\n@param name {String} Input name \"summedarea\".\n@param config {Object} Properties to customize the element.\n@param layer {OpenLayers.Layer} Layer which the widget is defined.\n@param parameters {Array} Array de parametros antes do processamento para o input.",
        "type": "function(name, config, layer, parameters) : Ext.Container",
        "returnDescription": "Returns an instance of summedarea Input."
      }
    ],
    "Window": [
      {
        "key": "_information",
        "completeAPI": "This tool is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.Window' target='_blank'>Ext.Window</a>.",
        "description": "Tool that allows to show contents in an interactive floating window.\nIt can only be shown when the layer is visible.",
        "name": "Floating Window tool",
        "examples": [
          "{{window|id=UNIQUE_ID|startVisible=true|underButtons=true}}"
        ]
      },
      {
        "key": "btnID",
        "description": "Defines the id of the button that controls the window visibility.",
        "type": "String",
        "examples": [
          "|btnID = window-button-id|"
        ]
      },
      {
        "key": "btnID",
        "description": "Defines the id of the button that controls the window visibility.",
        "type": "String",
        "examples": [
          "|btnID = window-button-id|"
        ]
      },
      {
        "key": "height",
        "description": "Defines the floating window initial height.",
        "type": "number",
        "examples": [
          "|height = 600px|"
        ]
      },
      {
        "key": "height",
        "description": "Defines the floating window initial height.",
        "type": "number",
        "examples": [
          "|height = 600px|"
        ]
      },
      {
        "key": "id",
        "description": "Defines an id for the div contained in the floating window (where the content can be drawn).",
        "type": "String",
        "examples": [
          "|id = window-div-id|"
        ]
      },
      {
        "key": "id",
        "description": "Defines an id for the div contained in the floating window (where the content can be drawn).",
        "type": "String",
        "examples": [
          "|id = window-div-id|"
        ]
      },
      {
        "key": "ignoreVisibility",
        "description": "Defines if the window should ignore the layer visibility state. \nBy default, the window visibility state is the same as the layer's. \nSet true to ignore the layer visibility state, false otherwise.\n\nPS: The 'ignoreVisibility' is not compatible with the 'associatedButtonID' property. When both are used together, the ignoreVisibility value is ignored.",
        "type": "Boolean",
        "examples": [
          "|ignoreVisibility = false|"
        ]
      },
      {
        "key": "ignoreVisibility",
        "description": "Defines if the window should ignore the layer visibility state. \nBy default, the window visibility state is the same as the layer's. \nSet true to ignore the layer visibility state, false otherwise.\n\nPS: The 'ignoreVisibility' is not compatible with the 'associatedButtonID' property. When both are used together, the ignoreVisibility value is ignored.",
        "type": "Boolean",
        "examples": [
          "|ignoreVisibility = false|"
        ]
      },
      {
        "key": "onBeforeHide",
        "description": "Defines a callback function to be called before hiding the floating window.\n@param layer {Object} Scope of the layer\n@param data {Array} [window, button, windowConfig]\nwindow: Window object;\nbutton: Button created;\nwindowConfig: Window object configuration",
        "type": "function",
        "examples": [
          "|onBeforeHide = function (layer, [window, button, windowConfig]){\n console.log(layer);\n console.log([window, button, windowConfig]);\n}|"
        ]
      },
      {
        "key": "onBeforeHide",
        "description": "Defines a callback function to be called before hiding the floating window.\n@param layer {Object} Scope of the layer\n@param data {Array} [window, button, windowConfig]\nwindow: Window object;\nbutton: Button created;\nwindowConfig: Window object configuration",
        "type": "function",
        "examples": [
          "|onBeforeHide = function (layer, [window, button, windowConfig]){\n console.log(layer);\n console.log([window, button, windowConfig]);\n}|"
        ]
      },
      {
        "key": "resize",
        "description": "Defines the callback function to be called when the floating window is resized.",
        "type": "function",
        "examples": [
          "|resize = function (){\n console.log(\"I was resized!\");\n}|"
        ]
      },
      {
        "key": "resize",
        "description": "Defines the callback function to be called when the floating window is resized.",
        "type": "function",
        "examples": [
          "|resize = function (){\n console.log(\"I was resized!\");\n}|"
        ]
      },
      {
        "key": "startVisible",
        "description": "Defines if the window should start visible or not. \nSet true if it should, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|startVisible = false|"
        ]
      },
      {
        "key": "startVisible",
        "description": "Defines if the window should start visible or not. \nSet true if it should, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|startVisible = false|"
        ]
      },
      {
        "key": "text",
        "description": "Defines the window button text.",
        "type": "string",
        "examples": [
          "|text = I am a button|"
        ],
        "default": "Show/Hide Window"
      },
      {
        "key": "text",
        "description": "Defines the window button text.",
        "type": "string",
        "examples": [
          "|text = I am a button|"
        ],
        "default": "Show/Hide Window"
      },
      {
        "key": "title",
        "description": "Defines the floating window's title.",
        "type": "String",
        "examples": [
          "|title = Title of the Window|"
        ],
        "default": "Window"
      },
      {
        "key": "title",
        "description": "Defines the floating window's title.",
        "type": "String",
        "examples": [
          "|title = Title of the Window|"
        ],
        "default": "Window"
      },
      {
        "key": "underButtons",
        "description": "Defines where the floating window will be positioned in relation to the buttons panel.\nSet true to position the window under the right buttons panel, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|underButtons = false|"
        ]
      },
      {
        "key": "underButtons",
        "description": "Defines where the floating window will be positioned in relation to the buttons panel.\nSet true to position the window under the right buttons panel, false otherwise.",
        "type": "Boolean",
        "examples": [
          "|underButtons = false|"
        ]
      },
      {
        "key": "width",
        "description": "Defines the floating window initial width.",
        "type": "number",
        "examples": [
          "|width = 600px|"
        ]
      },
      {
        "key": "width",
        "description": "Defines the floating window initial width.",
        "type": "number",
        "examples": [
          "|width = 600px|"
        ]
      },
      {
        "key": "windowID",
        "description": "Defines the window id.",
        "type": "String",
        "examples": [
          "|windowID = window-id|"
        ]
      },
      {
        "key": "windowID",
        "description": "Defines the window id.",
        "type": "String",
        "examples": [
          "|windowID = window-id|"
        ]
      },
      {
        "key": "x",
        "description": "Defines the initial absolute X position of the window.\n\nPS: Can be overwritten if defined together with 'underButtons' property.",
        "type": "Number"
      },
      {
        "key": "x",
        "description": "Defines the initial absolute X position of the window.\n\nPS: Can be overwritten if defined together with 'underButtons' property.",
        "type": "Number"
      },
      {
        "key": "y",
        "description": "Defines the initial absolute Y position of the window.\n\nPS: Can be overwritten if defined together with 'underButtons' property.",
        "type": "Number"
      },
      {
        "key": "y",
        "description": "Defines the initial absolute Y position of the window.\n\nPS: Can be overwritten if defined together with 'underButtons' property.",
        "type": "Number"
      }
    ]
  },
  "paramsButtonConfig": {
    "_information": {
      "description": "The paramsButtonConfig property is an array of objects that manage the layer menu buttons at the top right of the Legend Window. Each object in the array can have the following properties and functions:"
    },
    "paramsButtonConfigProperties": [
      {
        "key": "_information",
        "description": "You can define the following properties for a button:",
        "name": "paramsButtonConfig Properties"
      },
      {
        "key": "hideBottomButton",
        "description": "Define if should hide the buttons at the bottom of the Legend Window. I.e. \"Exibir Consulta\" e \"Exibir Legenda\". Set it to 'true' to hide those buttons or 'false' to display them.",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig hideBottomButton property',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The buttons at the bottom of the screen are hidden',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=There are no buttons in here\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 hideBottomButton: false,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "hideBottomButton",
        "description": "Define if should hide the buttons at the bottom of the Legend Window. I.e. \"Exibir Consulta\" e \"Exibir Legenda\". Set it to 'true' to hide those buttons or 'false' to display them.",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig hideBottomButton property',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The buttons at the bottom of the screen are hidden',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=There are no buttons in here\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 hideBottomButton: false,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "hideButton",
        "description": "Define if the associated button should be hidden. Set it to 'true' to hide the button or 'false' to show it.\nThis property only applies to the type: 'query'",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig hideButton property',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The query button in hidden',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 hideButton: true,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "hideButton",
        "description": "Define if the associated button should be hidden. Set it to 'true' to hide the button or 'false' to show it.\nThis property only applies to the type: 'query'",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig hideButton property',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'The query button in hidden',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 hideButton: true,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "iconCls",
        "description": "Define a class that will be added to the html in the associated button.\n\nThis class can be one that has a image on it like:\n   - 'gxp-icon-togglevisibility' is the icon of the Show/Hide Map Button (The first icon on the Legend Window, from left to right)\n   - 'gxp-icon-removelayers' is the icon of the Remove Layer Button (The second icon on the Legend Window, from left to right)\n   - 'gxp-icon-parameters-expand' is the icon of the Show Query Button (The third icon on the Legend Window, from left to right)\n   - 'gxp-icon-legend-expand' is the icon of the Show Legend Button (The forth icon on the Legend Window, from left to right)\n   - 'gxp-icon-downloadmapbutton' is the icon of the Download Button (The fifth icon on the Legend Window, from left to right)",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig iconCls property',\n     color: '#A020F0',\n     elements: [\n        {\n           title: 'The query button is the download icon:',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=Here is the query region\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 tooltip: 'This is actually the query button',\n                 // Here you can add any class you choose\n                 iconCls: 'gxp-icon-downloadmapbutton',\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "iconCls",
        "description": "Define a class that will be added to the html in the associated button.\n\nThis class can be one that has a image on it like:\n   - 'gxp-icon-togglevisibility' is the icon of the Show/Hide Map Button (The first icon on the Legend Window, from left to right)\n   - 'gxp-icon-removelayers' is the icon of the Remove Layer Button (The second icon on the Legend Window, from left to right)\n   - 'gxp-icon-parameters-expand' is the icon of the Show Query Button (The third icon on the Legend Window, from left to right)\n   - 'gxp-icon-legend-expand' is the icon of the Show Legend Button (The forth icon on the Legend Window, from left to right)\n   - 'gxp-icon-downloadmapbutton' is the icon of the Download Button (The fifth icon on the Legend Window, from left to right)",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig iconCls property',\n     color: '#A020F0',\n     elements: [\n        {\n           title: 'The query button is the download icon:',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=Here is the query region\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 tooltip: 'This is actually the query button',\n                 // Here you can add any class you choose\n                 iconCls: 'gxp-icon-downloadmapbutton',\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "pressed",
        "description": "Defines if the button should start pressed or not. Set it to 'true' for it to start pressed or 'false' for start unpressed.\nFor example, the 'query' button type set as pressed will display the Query region (where  the descriptionHtml content is) by default instead of the Legend region.\nThis property applies only to the types: 'query',",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig pressed property',\n     color: '#A020F0',\n     elements: [\n        {\n           title: 'The param button config set the query button to be pressed at the start',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=The region of the descriptionHtml will start opened\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "pressed",
        "description": "Defines if the button should start pressed or not. Set it to 'true' for it to start pressed or 'false' for start unpressed.\nFor example, the 'query' button type set as pressed will display the Query region (where  the descriptionHtml content is) by default instead of the Legend region.\nThis property applies only to the types: 'query',",
        "type": "Boolean",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig pressed property',\n     color: '#A020F0',\n     elements: [\n        {\n           title: 'The param button config set the query button to be pressed at the start',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=The region of the descriptionHtml will start opened\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "false"
      },
      {
        "key": "toggleGroup",
        "description": "Defines a group for all the buttons that has the same toggleGroup name. From all the buttons on the same group, only one can be active at each time. Whenever another one is activated the previous one collapses.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig toogleGroup',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=This is the description of Layer 1. Only one can be open each time.\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 toggleGroup: 'Group1',\n              },\n           ],\n        },\n        {\n           title: 'Layer 2',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=This is the description of Layer 2. Only one can be open each time.\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 toggleGroup: 'Group1',\n              },\n           ],\n        },\n        {\n           title: 'Layer 3',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=This is the description of Layer 3. Only one can be open each time.\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 toggleGroup: 'Group1',\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "toggleGroup",
        "description": "Defines a group for all the buttons that has the same toggleGroup name. From all the buttons on the same group, only one can be active at each time. Whenever another one is activated the previous one collapses.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig toogleGroup',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=This is the description of Layer 1. Only one can be open each time.\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 toggleGroup: 'Group1',\n              },\n           ],\n        },\n        {\n           title: 'Layer 2',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=This is the description of Layer 2. Only one can be open each time.\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 toggleGroup: 'Group1',\n              },\n           ],\n        },\n        {\n           title: 'Layer 3',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=This is the description of Layer 3. Only one can be open each time.\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 toggleGroup: 'Group1',\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "tooltip",
        "description": "Defines the help tooltip text that is displayed when the mouse hover the associated button.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig tooltip property',\n     color: '#A020F0',\n     elements: [\n        {\n           title: 'The query button is the third of the buttons at the right:',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=Hover the query button. That is the third button from left to right.\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "tooltip",
        "description": "Defines the help tooltip text that is displayed when the mouse hover the associated button.",
        "type": "String",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig tooltip property',\n     color: '#A020F0',\n     elements: [\n        {\n           title: 'The query button is the third of the buttons at the right:',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           descriptionHtml:\n              '\\{\\{label|text=Hover the query button. That is the third button from left to right.\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "string.empty"
      },
      {
        "key": "type",
        "description": "Define which button will be affected by the configurations. The type can be one of the following:\n\n  - 'query': The query button is the one with sum, subtraction, division and multiplication signs. This button shows or hides the Query region (where the descriptionHtml is placed).\n\n  - 'download': The download button is the one with a downward arrow. This button allows the user to download the dataset. It also defines which Layer should be downloaded when more than one Layer is shown by its internal layer index.\n\n  - 'metadata': The metadata button is the one with a script icon. This button displays a popup with more information about the maps used in the actual Layer. You can make it show one of the inside composite Layer by his index.\n\n  - 'associated': Creates a custom button that is linked to another button defined in the descriptionHtml. When one is pressed the other is also pressed.\n\nIf the paramButtonsConfig has only one Object inside it and it doesn't have a type, its type will be query.\nPS: The properties are aditional, so the common must always be present, and for each type his corresponding property must be added.",
        "type": "String",
        "examples": [
          "// Example on how to use the query type paramsButtonConfig\n[\n  {\n     title: 'Example of paramButtonConfig types',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has custom buttons on the Legend Window',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           startLegendOpen: true,\n           descriptionHtml:\n              '\\{\\{label|text=The third button is the Query type\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 tooltip: 'This is the query button',\n                 pressed: true,\n                 handler: function handleClick(button, clickEvent)  {\n                    ExtjsUtils.ALERTIFY.log('You\\'ve clicked the query button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]",
          "// Example on how to use the metadata type paramsButtonConfig \n[\n  {\n     title: 'Example of paramButtonConfig types',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has custom buttons on the Legend Window',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           startLegendOpen: true,\n           descriptionHtml:\n              '\\{\\{label|text=The third button is the metadata type\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n              { \n                 type: 'metadata',\n                 tooltip: 'This is the metadata button',\n                 handler: function handleClick(button, clickEvent)  {\n                    ExtjsUtils.ALERTIFY.log('You\\'ve clicked the metadata button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]",
          "// Example on how to use the download type paramsButtonConfig \n[\n  {\n     title: 'Example of paramButtonConfig types',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has custom buttons on the Legend Window',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           startLegendOpen: true,\n           descriptionHtml:\n              '\\{\\{label|text=The last  button is the download type\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n              { \n                 type: 'download',\n                 tooltip: 'This is the download button',\n                 handler: function handleClick(button, clickEvent)  {\n                    ExtjsUtils.ALERTIFY.log('You\\'ve clicked the download button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]",
          "// Example on how to use the associated type paramsButtonConfig\n[\n  {\n     title: 'Example of paramButtonConfig types',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has custom buttons on the Legend Window',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           startLegendOpen: true,\n           descriptionHtml:\n              '\\{\\{label|text=The third button is the associated type\\}\\}'\n              +\n              '\\{\\{button|id=test_button|text=This is the custom associated button|enableToggle=true\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n              { \n                 type: 'associated',\n                 tooltip: 'This is the custom button',\n                 associatedButtonID: 'test_button',\n                 // The handler only triggers for the Legend Window button (not the descriptionHtml associatedButton)\n                 handler: function handleClick(button, clickEvent)  {\n                    ExtjsUtils.ALERTIFY.log('You\\'ve clicked the custom button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "'query'"
      },
      {
        "key": "type",
        "description": "Define which button will be affected by the configurations. The type can be one of the following:\n\n  - 'query': The query button is the one with sum, subtraction, division and multiplication signs. This button shows or hides the Query region (where the descriptionHtml is placed).\n\n  - 'download': The download button is the one with a downward arrow. This button allows the user to download the dataset. It also defines which Layer should be downloaded when more than one Layer is shown by its internal layer index.\n\n  - 'metadata': The metadata button is the one with a script icon. This button displays a popup with more information about the maps used in the actual Layer. You can make it show one of the inside composite Layer by his index.\n\n  - 'associated': Creates a custom button that is linked to another button defined in the descriptionHtml. When one is pressed the other is also pressed.\n\nIf the paramButtonsConfig has only one Object inside it and it doesn't have a type, its type will be query.\nPS: The properties are aditional, so the common must always be present, and for each type his corresponding property must be added.",
        "type": "String",
        "examples": [
          "// Example on how to use the query type paramsButtonConfig\n[\n  {\n     title: 'Example of paramButtonConfig types',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has custom buttons on the Legend Window',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           startLegendOpen: true,\n           descriptionHtml:\n              '\\{\\{label|text=The third button is the Query type\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 tooltip: 'This is the query button',\n                 pressed: true,\n                 handler: function handleClick(button, clickEvent)  {\n                    ExtjsUtils.ALERTIFY.log('You\\'ve clicked the query button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]",
          "// Example on how to use the metadata type paramsButtonConfig \n[\n  {\n     title: 'Example of paramButtonConfig types',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has custom buttons on the Legend Window',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           startLegendOpen: true,\n           descriptionHtml:\n              '\\{\\{label|text=The third button is the metadata type\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n              { \n                 type: 'metadata',\n                 tooltip: 'This is the metadata button',\n                 handler: function handleClick(button, clickEvent)  {\n                    ExtjsUtils.ALERTIFY.log('You\\'ve clicked the metadata button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]",
          "// Example on how to use the download type paramsButtonConfig \n[\n  {\n     title: 'Example of paramButtonConfig types',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has custom buttons on the Legend Window',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           startLegendOpen: true,\n           descriptionHtml:\n              '\\{\\{label|text=The last  button is the download type\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n              { \n                 type: 'download',\n                 tooltip: 'This is the download button',\n                 handler: function handleClick(button, clickEvent)  {\n                    ExtjsUtils.ALERTIFY.log('You\\'ve clicked the download button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]",
          "// Example on how to use the associated type paramsButtonConfig\n[\n  {\n     title: 'Example of paramButtonConfig types',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'This Layer has custom buttons on the Legend Window',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           startLegendOpen: true,\n           descriptionHtml:\n              '\\{\\{label|text=The third button is the associated type\\}\\}'\n              +\n              '\\{\\{button|id=test_button|text=This is the custom associated button|enableToggle=true\\}\\}',\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 pressed: true,\n              },\n              { \n                 type: 'associated',\n                 tooltip: 'This is the custom button',\n                 associatedButtonID: 'test_button',\n                 // The handler only triggers for the Legend Window button (not the descriptionHtml associatedButton)\n                 handler: function handleClick(button, clickEvent)  {\n                    ExtjsUtils.ALERTIFY.log('You\\'ve clicked the custom button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "'query'"
      }
    ],
    "paramsButtonConfigFunctions": [
      {
        "key": "_information",
        "description": "You can use the following functions for a button:",
        "name": "paramsButtonConfig Functions"
      },
      {
        "key": "handler",
        "description": "Defines a function that will be called when the associated button is clicked.\n@param button {Object} is the button that was clicked by the mouse.\n@param clickEvent {MouseEvent} is the object that carries more information about the click event.",
        "type": "function(button, clickEvent)",
        "examples": [
          "[\n  {\n     title: 'Example of callback when clicking in a Legend Window button',\n     color: '#A020F0',\n     elements: [\n        {\n           title: 'The handleClick function will be called when the query button is clicked',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 handler: function handleClick(button, clickEvent) {\n                    ExtjsUtils.ALERTIFY.log('You clicked the query button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]"
        ]
      },
      {
        "key": "handler",
        "description": "Defines a function that will be called when the associated button is clicked.\n@param button {Object} is the button that was clicked by the mouse.\n@param clickEvent {MouseEvent} is the object that carries more information about the click event.",
        "type": "function(button, clickEvent)",
        "examples": [
          "[\n  {\n     title: 'Example of callback when clicking in a Legend Window button',\n     color: '#A020F0',\n     elements: [\n        {\n           title: 'The handleClick function will be called when the query button is clicked',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 handler: function handleClick(button, clickEvent) {\n                    ExtjsUtils.ALERTIFY.log('You clicked the query button');\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]"
        ]
      },
      {
        "key": "toggleHandler",
        "description": "This function is called whenever the associated button change its toggle state.\nPS: Using custom function, ignore the associatedButtonID \"It doesnt have to even exists\".\n@param button {Ext.Button} The button element that was clicked\n@param state {Boolean} The next state of the button, true means pressed",
        "type": "function(button, state)",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig toogleHandler',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 toggleHandler: function handleToggle(button, state) {\n                    let queryButtonState = state ? 'pressed' : 'unpressed';\n                    console.log(`Layer 1 query button is: ${queryButtonState}`);\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      },
      {
        "key": "toggleHandler",
        "description": "This function is called whenever the associated button change its toggle state.\nPS: Using custom function, ignore the associatedButtonID \"It doesnt have to even exists\".\n@param button {Ext.Button} The button element that was clicked\n@param state {Boolean} The next state of the button, true means pressed",
        "type": "function(button, state)",
        "examples": [
          "[\n  {\n     title: 'Example of paramButtonConfig toogleHandler',\n     color: '#FFA500',\n     elements: [\n        {\n           title: 'Layer 1',\n           name: 'CSR:geologia',\n           source: 'calculate',\n           visibility: true,\n           paramsButtonConfig: [\n              { \n                 type: 'query',\n                 toggleHandler: function handleToggle(button, state) {\n                    let queryButtonState = state ? 'pressed' : 'unpressed';\n                    console.log(`Layer 1 query button is: ${queryButtonState}`);\n                 },\n              },\n           ],\n        },\n     ],\n  },\n]"
        ],
        "default": "null"
      }
    ]
  },
  "Sharing Maps": {
    "_information": {
      "description": "You can share the Queries you create with Mappia through public links.\nTo save your Query, you need to login at Mappia. Then hover the 'Query' button at the top left, define the name for the Query and, at last, click 'Salvar'.\nA 'queryId' will be generated for your custom Query. You can open any saved Query by passing the 'queryId' at the Mappia URL, like this: 'https://maps.csr.ufmg.br/calculator/?queryid=&lt;insert_your_query_id_number&gt;'.\nAll Queries are saved publicly and can be accessed by anyone, but only the creator can update it.",
      "example": "// Example link for sharing a map just with its visualization\nhttps://maps.csr.ufmg.br/calculator/?queryid=473\n\n// Example link for sharing a map with its Query visible\nhttps://maps.csr.ufmg.br/editor/?queryid=473"
    },
    "URLProperties": [
      {
        "key": "_information",
        "description": "The Query URL can have other properties that can customize how you share your map.",
        "name": "URL Properties"
      },
      {
        "key": "extent",
        "description": "Defines in which part of the world the map will start on load.\nThe extents must be in EPSG:4326 (coordinates in lat,long). Also, the values need to be in the order: minX, minY, maxX, maxY, separated by comma with no spaces between them.",
        "type": "Array.<Number>",
        "examples": [
          "// Example of query in visualization mode\n// This extents start the map center at Japan\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&extent=122,24,153,45",
          "// Example of query in edit mode\n// This extents will display the whole world\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&extent=-180.0000,-90.0000,180.0000,90.0000"
        ],
        "default": "[-443.628,-16.847,-407.373,3.294]"
      },
      {
        "key": "lang",
        "description": "Define in which language the Mappia default messages and texts will be displayed.\nActually, Mappia supports the following languages:\n- Portuguese (Brazil): pt\n- English: eng",
        "type": "String",
        "examples": [
          "// Example of query in visualization mode\n// The default text will be displayed in portuguese\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&lang=pt",
          "// Example of query in edit mode\n// The default text will be displayed in english\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&lang=eng"
        ],
        "default": "'pt'"
      },
      {
        "key": "map",
        "description": "Allow the user to define which 'local' maps to load on the URL.\nYou need to pass the map name like in the ones passed at the 'name' property of a Layer with 'source' set as 'local'.\nThis property only applies for visualization mode.",
        "type": "string",
        "examples": [
          "// Example of loading a map without any 'queryid' in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?map=CSR:geologia",
          "// Example of loading two map without any 'queryid' in visualization mode\n// and starting with them visible\nhttps://maps.csr.ufmg.br/calculator/?map=CSR:geologia,CSR:estados&visiblelayers=2",
          "// Example of loading a map without any 'queryid'\nhttps://maps.csr.ufmg.br/?map=CSR:geologia"
        ],
        "default": "string.empty"
      },
      {
        "key": "options",
        "description": "Allows the user to set some configurations when the map loads, like displaying a scale, how many Layers will start visible, etc…",
        "type": "string",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&options=&ltoptions_list&gt;",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&options=&ltoptions_list&gt;"
        ],
        "default": "string.empty",
        "see": [
          "To learn more about the Options available and how to set them up, check their documentation at: [URL Options Section](#category_URLOptions)."
        ]
      },
      {
        "key": "queryid",
        "description": "Define which Query will be loaded when the map loads. Every saved Query at Mappia  receives a Query id number. By adding that number to the 'queryid', you can select the query loaded by the link.\nYou can find all Queries created at Mappia in the 'Query' button at the top left in the editor window. By hovering the button and selecting the 'Carregar Queries' option, a popup will show up with all the Queries created at Mappia. The older Queries are listed first.",
        "type": "Number",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=473",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=473"
        ],
        "default": "null"
      },
      {
        "key": "tools",
        "description": "Define which tools will be available for the user to interact with the map. Every tool listed here will be available for the user.\nIf left empty, Mappia will display all tools for the user.",
        "type": "string",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=&lt;tools_list&gt;",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=&lt;tools_list&gt;"
        ],
        "default": "'All tools available'",
        "see": [
          "To learn more about the Tools available and how to set them up, check their documentation at: [URL Tools Section](#category_URLTools)."
        ]
      },
      {
        "key": "visiblelayers",
        "description": "The 'visiblelayers' property is an integer value that defines how many Layers will start visible at load. The 'visiblelayes' can assume 5 type values:\n   - Positive integers: Define how many Layers will start visible when the map loads starting from the first (top) and going to the last (bottom)\n\n   - Negative integers: Define how many Layers will start visible when the map loads starting from the last (bottom) to the first (top)\n\n   - Zero: If set to zero, no Layer will start visible\n\n   - custom: The Layers will start visible as defined by the 'visibility' property of each Layer\n\n   - null: Set that there is no limit for the amount of visible Layers",
        "type": "Number",
        "examples": [
          "// Example of query in visualization mode\n// If the Layer has 3 Layers in the order: Layer1, Layer2 and Layer3,\n// By setting 'visibelayers=2', the FIRST two Layers will start visible\n// That is, the Layer1 and Layer2 will start visible\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&visiblelayers=2",
          "// Example of query in edit mode\n// If the Layer has 3 Layers in the order: Layer1, Layer2 and Layer3\n// By setting 'visiblelayers=-2', the LAST two Layers will start visible\n// That is, the Layer3 and Layer2 will start visible\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&visiblelayers=-2",
          "// Example of query in edit mode\n// By setting 'visiblelayers=0', no Layer will start visible when the map loads\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&visiblelayers=0",
          "// Example of query in visualization mode\n// By setting 'visiblelayers=custom', the Layers will start visible based on\n// its 'visibility' property. Only if 'visibility: true', the Layer will start visible\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&visiblelayers=custom",
          "// Example of query in edit mode\n// By setting 'visiblelayers=null', there will be no limit for the amount of visible layers\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&visiblelayers=null"
        ],
        "default": "100"
      }
    ],
    "URLTools": [
      {
        "key": "_information",
        "description": "You can select which tools will be available for someone when sharing your map. All tools listed in the URL will be available for the user.",
        "name": "URL Tools",
        "example": "// Example with all possible tools\nhttps://maps.csr.ufmg.br/calculator/?queryid=474&tools=legend,measure,hovershowlegend,getfeature,customzoom,zoomextent,helpintro"
      },
      {
        "key": "customzoom",
        "description": "If listed, will display the \"Zoom de seleção\" button. This button allows the user to drag the mouse to select a region to zoom in on the map.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=customzoom",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=customzoom"
        ],
        "default": "true"
      },
      {
        "key": "getfeature",
        "description": "If listed, will display the \"Indentifica atributos da feição\" button. This button, when active, allows the user to click at a specific point in the map and get the more informations of the point that was clicked.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=getfeature",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=getfeature"
        ],
        "default": "true"
      },
      {
        "key": "helpintro",
        "description": "Define if should display the Help Tutorial button. This button opens a simple tutorial on how to use the Mappia features.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=helpintro",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=helpintro"
        ],
        "default": "true"
      },
      {
        "key": "hovershowlegend",
        "description": "If listed, will display the \"Exibir da legenda da feição sob o mouse\" button. This button, when active, allows the user to see the map Legend value of where the mouse is hovering.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=hovershowlegend",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=hovershowlegend"
        ],
        "default": "true"
      },
      {
        "key": "legend",
        "description": "If listed, will display the Legend popup button. This button shows a popup with the Legend of the active layers.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=legend",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=legend"
        ],
        "default": "true"
      },
      {
        "key": "measure",
        "description": "If listed, will display the Ruler button. This button allows the user to do measurements of distances in the map.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=measure",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=measure"
        ],
        "default": "true"
      },
      {
        "key": "none",
        "description": "If passed as the only value for the ‘tools’ property, no tool will be available for the user to interact with the map.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=none",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=none"
        ],
        "default": "false"
      },
      {
        "key": "zoomextent",
        "description": "If listed, will display the \"Zoom nos layer\" button. The button that centers the screen at the actual visible layer.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&tools=zoomextent",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&tools=zoomextent"
        ],
        "default": "true"
      }
    ],
    "URLOptions": [
      {
        "key": "_information",
        "description": "You can also define some configurations for when the Layers will be loaded in the URL.",
        "name": "URL Options",
        "example": "// Example with all possible options\nhttps://maps.csr.ufmg.br/calculator/?queryid=474&options=capabilities,grid,scale,disabledownload,hidemetadata,overview,onlyfirstvisible"
      },
      {
        "key": "capabilities",
        "description": "If listed, will load only the maps defined in the 'name' property of the Layers. This can speed up the loading time of the Query.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&options=capabilities",
          "// Example of query in editor mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&options=capabilities"
        ],
        "default": "false"
      },
      {
        "key": "disabledownload",
        "description": "If listed, will hide the “download” button of the Legend Window.\nThe “download” button is the same one as the “paramButtonConfig” “download” type.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id>&gt;&options=disabledownload",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id>&gt;&options=disabledownload"
        ],
        "default": "false"
      },
      {
        "key": "grid",
        "description": "If listed, will display the parallel and meridian lines grid.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&options=grid",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&options=grid"
        ],
        "default": "false"
      },
      {
        "key": "hidemetadata",
        "description": "If listed, will hide the “metadata” button of the Legend Window.\nThe “metadata” button is the same one as the “paramButtonConfig” “metadata” type.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id>&gt;&options=hidemetadata",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id>&gt;&options=hidemetadata"
        ],
        "default": "false"
      },
      {
        "key": "onlyfirstvisible",
        "description": "If listed, only the first Layer defined at the Query will be visible when the map loads.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id>&gt;&options=onlyfirstvisible",
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id>&gt;&options=onlyfirstvisible"
        ],
        "default": "false"
      },
      {
        "key": "overview",
        "description": "If listed, will display a zoom out interactable window at the bottom right when the user zooms in the map.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&options=overview",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&options=overview"
        ],
        "default": "false"
      },
      {
        "key": "scale",
        "description": "If listed, will display the scale of the map at the bottom left.",
        "type": "Boolean",
        "examples": [
          "// Example of query in visualization mode\nhttps://maps.csr.ufmg.br/calculator/?queryid=&lt;query_id&gt;&options=scale",
          "// Example of query in edit mode\nhttps://maps.csr.ufmg.br/editor/?queryid=&lt;query_id&gt;&options=scale"
        ],
        "default": "false"
      }
    ]
  },
  "General Information": {
    "_information": {
      "description": "Some General information that may help in sharing and using maps"
    },
    "RawMaps": [
      {
        "key": "_information",
        "completeAPI": "View the complete Raw Maps <a href='/api/#category_RawMaps'>API here</a>.",
        "description": "The Raw Maps are some maps that are sent with each pixel value and not a RGBA color. All the manipulations are at most with integer or float precision so the colors must be applied on the client, after some calculation to, on the client, create each cell color value.",
        "name": "Web Raw Maps"
      },
      {
        "key": "operations",
        "description": "An enumeration of the possible operations that can be performed on a map.\n@param Value {Number} is the value of the Enum\n* RAW Each cell in resulting map has the value of ther most centered cell in aggregated region.\n* NORMAL A normal map is a map with each cell representing a legend/color and aren't a RAW Maps type.\n* RGBA Each cell in resulting map has a integer value representing the RGBA composition.\nPS: The result and also the input are integers represented by RGBA values.\n* SUM Each resulting cell is the weighted sum of cells in the covering region.\nPS2: The weight used is the proportion of the covered area against the total area of the cell i.e. VALUE * COVERED_PERCENTAGE.\n* AVERAGE Each cell is the resulting of the weighted mean of cell in the covered region.\n* MAX Each resulting cell is the greater cell that is at least partially covered in the given region.\n* MIN Each resulting cell is the smaller cell that is at least partially covered in the given region.\n* INTEGRAL A technique that allows to calculate the sum in a region just inspecting the cells on the \nboundaries of a retangular area i.e. calculate sum in a region using only 4 points.\n* AREAINTEGRAL TODO: Adicionar descrição\n* AREA Each cell carry the original map area in the aggregated region.\n(?) PS3: The 'area' simplifier agregates the original map areas, allowing to calculate the totals in any scale (with total precision).\n* CELLS Weighted sum of the cell quantity in a given region.",
        "type": "function"
      }
    ],
    "QGIS": [
      {
        "key": "_information",
        "description": "The style can be defined in QGIS and the automatic publication process will create the same looking style from the style file.",
        "name": "QGIS stylization"
      }
    ]
  },
  "Configuring Layers": {
    "_information": {
      "description": "Properties that allow to, define, custumize, provide functionalities to layers"
    },
    "ConfigLayer": [
      {
        "key": "_information",
        "completeAPI": "View all layer configuration <a href='/api/#category_ConfigLayer'>API here</a>.",
        "description": "Configurable exhibition of each map, defining interactions, possible internal maps and applied calculations among them.",
        "name": "Layer properties configuration"
      },
      {
        "key": "attribution",
        "description": "Recognizes someone as the platform author, showing in the \"Powered by: {insert name}\".",
        "type": "String"
      },
      {
        "key": "enableToggle",
        "description": "Defines the associated button as a regular button or toggle.\nPS: When its true the callback function name is 'toggle', otherwise the callback is 'handler'.",
        "type": "Boolean",
        "examples": [
          "|enableToggle=|"
        ],
        "default": "true"
      },
      {
        "key": "enableToggle",
        "description": "Defines the associated button as a regular button or toggle.\nPS: When its true the callback function name is 'toggle', otherwise the callback is 'handler'.",
        "type": "Boolean",
        "examples": [
          "|enableToggle=|"
        ],
        "default": "true"
      },
      {
        "key": "getLayerLegend",
        "description": "Gets the associated layer legend content by its index.\n\nPS: The legend format is the same as expected by the composedLayer.setCalculateLegend function.\nUsage:this.setCalculateLegend(ExtjsUtils.Layer.getLayerLegend(composedLayer, 0));\n@param composedLayer {OpenLayers.Layer.Composed} Layer composed.\n@param index {Numeric} Index of the inside layer.",
        "type": "function(composedLayer, index) : Array",
        "returnDescription": "Array with the legend entries [{color, value, title}, ...]."
      },
      {
        "key": "getLayerLegend",
        "description": "Gets the associated layer legend content by its index.\n\nPS: The legend format is the same as expected by the composedLayer.setCalculateLegend function.\nUsage:this.setCalculateLegend(ExtjsUtils.Layer.getLayerLegend(composedLayer, 0));\n@param composedLayer {OpenLayers.Layer.Composed} Layer composed.\n@param index {Numeric} Index of the inside layer.",
        "type": "function(composedLayer, index) : Array",
        "returnDescription": "Array with the legend entries [{color, value, title}, ...]."
      },
      {
        "key": "group",
        "description": "Defines which group the layer is associated with. \nLayers from the same group can't be active simultaneously.",
        "type": "String"
      },
      {
        "key": "isCalculationPaused",
        "description": "Returns calculation status.\nTrue if calculations are paused, false otherwise.",
        "type": "function() : Boolean",
        "returnDescription": "Calculation is paused"
      },
      {
        "key": "isCalculationPaused",
        "description": "Returns calculation status.\nTrue if calculations are paused, false otherwise.",
        "type": "function() : Boolean",
        "returnDescription": "Calculation is paused"
      },
      {
        "key": "maxExtent",
        "description": "Defines a geographical limit for a map rendering.",
        "type": "OpenLayers.Bounds"
      },
      {
        "key": "maxZoom",
        "description": "Defines the limit of the real max zoom of a given layer.\nWhen map zoom exceed this, the image is reused and stretched.",
        "type": "Numeric"
      },
      {
        "key": "maxscale",
        "description": "Defines the limit of the real max scale of a given layer. \nWhen the map scale value exceeds the defined one, the image is reused and stretched.",
        "type": "Numeric"
      },
      {
        "key": "metadataUrl",
        "description": "Defines the url to show custom layers metadata information.\nIf empty, the default value is obtained from layer metadata from the WMS definition.\n\nPS: The linked domain must have CORS headers enabled.",
        "type": "string|null"
      },
      {
        "key": "metadataUrl",
        "description": "Defines the url to show custom layers metadata information.\nIf empty, the default value is obtained from layer metadata from the WMS definition.\n\nPS: The linked domain must have CORS headers enabled.",
        "type": "string|null"
      },
      {
        "key": "minscale",
        "description": "Defines the limit of the real min scale of a given layer. \nWhen the map scale reaches a value lower than the defined one, the image is reused and compressed.",
        "type": "Numeric"
      },
      {
        "key": "openGroup",
        "description": "Defines if the group starts opened, even without any visible layers.\nSet it true to start open, false otherwise.\nPS: If one layer is visible, the group will start open.",
        "type": "Boolean"
      },
      {
        "key": "type",
        "description": "Defines a data source in one of the supported types: 'load', 'csv', 'json' or 'default'.\n\n'load': The user is responsible for load data directly on layer.\n   P.S.: This type, 'load', depends on an additional property, to be added on layer configuration, the 'loadData' callback function (inputs, layerConfig) called on layer scope.\n   The user must inform the starting and ending of each data loading on layer (The calls are accumulative) [respectively this.events.triggerEvent('startLoadingLayer') and this.events.triggerEvent('endLoadingLayer')].\n'csv': Url address to load csv file from.\n'json': Json data directly itself.\n'jsonurl': Url address to load json from\n   P.S.: Depends on the url: property to give this type a url address.\n'empty'",
        "type": "String",
        "default": "\"json\""
      },
      {
        "key": "useLayerTooltip",
        "description": "if true, it allows to use the tooltip of a map if its source attribute is calculate.",
        "type": "Boolean"
      },
      {
        "key": "useLayerTooltip",
        "description": "if true, it allows to use the tooltip of a map if its source attribute is calculate.",
        "type": "Boolean"
      }
    ],
    "VectorLayer": [
      {
        "key": "_information",
        "completeAPI": "View complete VectorLayer documentation <a href='/api/#category_VectorLayer'>API here</a>.",
        "description": "Vector Layer configuration.",
        "name": "VectorLayer configuration"
      },
      {
        "key": "clusterDistance",
        "description": "Defines the minimum relative distance (in pixels) to clusterize points. \nSet 0 to never clusterize, or a value greater than 0 to set the minimum distance.\nPS: When filters are applied, you can use the property 'count' on 'VectorLayer.styleMap' property to check how many points exists in the current cluster.",
        "type": "Numeric"
      },
      {
        "key": "convertJsonEntryToFeature",
        "description": "Converts a JsonObject into a Layer Feature (that can be added to layer).\n@param curObj {JsonObject} Object with properties.\n@param optionalGetLonLat {function} Optional function to get position coordinates from JSON.\n  P.S.: Optional function to get X,Y values from Obj. (By default Longitude and Latitude use fields: lon and lat)\n  function optionalGetLonLat(curObj) returns OpenLayers.LonLat\n    curObj: Object with JSON properties.\n  This function receive the 'curObj' and expects to returns the object properties.",
        "type": "function(curObj, optionalGetLonLat) : OpenLayers.Feature.Vector",
        "returnDescription": "Returns the Feature from JsonObj."
      },
      {
        "key": "coordinates",
        "description": "Redefines the coordinate property names to {x, y}.\nPS: Used only if the 'VectorLayer.getVector' is not defined.",
        "type": "Object",
        "examples": [
          "coordinates: {\n              'x': 'lon',\n              'y': 'lat'\n          }"
        ]
      },
      {
        "key": "defaultStyle",
        "description": "Defines the default style that will be applied to the geometry. \nPS: Accepts 'context' and 'rules'.\n    Property 'context': allows definition of functions.\n    Property 'rules': allows definition of filters (only the geometries that fit into this rule will be displayed).\n\nLook at some examples at: http://dev.openlayers.org/examples/",
        "type": "Object",
        "examples": [
          "defaultStyle: {color: '${getColor}', context: {getColor: function(attr){return 'green';} }"
        ]
      },
      {
        "key": "fromProj",
        "description": "Defines the projection of the JSON (accepts only EPSG:4326 and EPSG:900913).",
        "type": "String",
        "examples": [
          "EPSG:900913"
        ]
      },
      {
        "key": "getLayerDefinedFunctionsByName",
        "description": "Gets the layer inner function.\n\nDefine the layer inner function at VectorLayer.\nEx: {\n  name: 'CSR:map_name',\n  function: {\n    nameFunctionExample: function(){alert('a');}\n  }\n}\n@param name {String} Function name",
        "type": "function(name) : function|Undefined"
      },
      {
        "key": "getVector",
        "description": "Defines the callback function to parse the layer data and get the geometry.\nCallback Function getVector function(attribute, config)\n@param attribute {Object} Object with attributes.\n@param config {Object} Layer config.",
        "type": "function",
        "returnDescription": "Return or the lat long point or the vector with the complex geometry."
      },
      {
        "key": "hoverSelectedStyle",
        "description": "Defines the style that will be applied to the geometry when the mouse hovers over a selected feature. Default hover selected style is the selected style   \nPS: Accepts 'context' and 'rules'.\n    Property 'context': allows definition of functions.\n    Property 'rules': allows definition of filters (only the geometries that fit into this rule will be displayed).\nPS2: Hover Select depends on both 'onHover' and 'onClick' properties to work.\n\nLook at some examples at: http://dev.openlayers.org/examples/",
        "type": "Object",
        "examples": [
          "[{color: '${getColor}', context: {getColor: function(attr){return 'green';} }]"
        ]
      },
      {
        "key": "hoverStyle",
        "description": "Defines the style that will be applied to the geometry when mouse is hovering. \nPS: Accepts 'context' and 'rules'.\n    Property 'context': allows definition of functions.\n    Property 'rules': allows definition of filters (only the geometries that fit into this rule will be displayed).\nPS2: Hover depends on 'onHover' property that allows to hovering.\n\nLook at some examples at: http://dev.openlayers.org/examples/",
        "type": "Object",
        "examples": [
          "[{color: '${getColor}', context: {getColor: function(attr){return 'green';} }]"
        ]
      },
      {
        "key": "loadGeojson",
        "description": "Function to load geojson and draw on the layer.",
        "type": "function()"
      },
      {
        "key": "onAdded",
        "description": "Defines the callback function that is called when the layer is added to layer list.\n\nAddedEvent {\n    element: {DOM} 'DOM element of the layer',\n    layer: {OpenLayers.Layer.Vector} 'Javascript Object of the layer',\n    map: {Map} 'MapPanel where the layer was added.',\n    type: {String} 'Type of the event ( added )'\n}",
        "type": "function"
      },
      {
        "key": "onBeforeFeatureChangeCallback",
        "description": "Defines the callback function that is called before a layer feature is added, removed or edited.\nPS: If it returns false, the change operation is canceled.\n@param operationType {String} Receive the operation type: 'add' or 'remove' when adding or removing respectively.\n@param arrFeatures {Array} Array of features affected.",
        "type": "function",
        "examples": [
          "{\n     ...,\n     onBeforeFeatureChangeCallback: function(operationType, arrFeatures) {\n         \n     },\n     ...\n}"
        ]
      },
      {
        "key": "onClick",
        "description": "Defines the callback function to the click event.\n@param event {Object} The click event Object.\n@param source {VectorFileSource} Auxiliary functions to deal with Vector Layer.\n@param inputs {Array.<Object>} Array with all layer input values.",
        "type": "function",
        "examples": [
          "{\n     ...,\n     onClick: function (event) {\n         console.log(\"Triggered click event!\");\n     },\n     ...\n}"
        ]
      },
      {
        "key": "onClickCfg",
        "description": "Defines the callback function to the Click Select controller.\nThe additional parameters are listed in http://dev.openlayers.org/docs/files/OpenLayers/Control/SelectFeature-js.html.",
        "type": "function"
      },
      {
        "key": "onFeatureChangeCallback",
        "description": "Defines a function that is called after a layer feature is added, removed or edited.\n@param operationType {String} Receive the operation type: 'add' or 'remove' when adding or removing respectively.\n@param arrFeatures {Array} Array of features affected.",
        "type": "function",
        "examples": [
          "{\n     ...,\n     onFeatureChangeCallback: function (operationType, arrFeatures) {\n         \n     },\n     ...\n}"
        ]
      },
      {
        "key": "onHover",
        "description": "Defines the callback function on 'Vector Layer' hover.\n@param evt {Object} Features.\n@param state {Boolean} True when hover starts, false when it ends.\n@param controller {Object} The controller itself.\n@param inputs {Object} Layer widget values.",
        "type": "function",
        "examples": [
          "{\n     ...,\n     onHover: function (evt, state, controller, inputs) {\n         console.log(state ? \"Started\": \"Ended\");\n     },\n     ...\n}"
        ]
      },
      {
        "key": "onLoad",
        "description": "Defines the callback function to be called after the layer is loaded or added to a map.\nPS: You can use 'this' to access layer properties.\n@param widgetValues {Array} inputs for onLoad callback",
        "type": "function",
        "examples": [
          "{\n     ...,\n     onLoad: function (widgetValues) {\n         print(this.title) // prints the layer title\n     },\n     ...\n}"
        ]
      },
      {
        "key": "popupCallback",
        "description": "Defines the callback function to be called on popup.\n@param attributes {Array} attributes for popupCallback\n@param inputs {Array} inputs for popupCallback",
        "type": "function",
        "examples": [
          "{\n     ...,\n     popupCallback: function (attributes, inputs) {\n         \n     },\n     ...\n}"
        ]
      },
      {
        "key": "popupTemplate",
        "description": "Defines the template to popup content.",
        "type": "String",
        "examples": [
          "popupTemplate: '<div><a target=\"_blank\" href=\"{link}\">{description}</a></div>'"
        ],
        "default": "'<a target=\"_blank\" href=\"{link}\">{description}</a>'"
      },
      {
        "key": "selectStyle",
        "description": "Defines the default style that will be applied to the selected geometry. \nPS: Accepts 'context' and 'rules'.\n    Property 'context': allows definition of functions.\n    Property 'rules': allows definition of filters (only the geometries that fit into this rule will be displayed).\nPS2: Selected depends on 'onClick' property that allows to select.\n\nLook at some examples at: http://dev.openlayers.org/examples/",
        "type": "Object",
        "examples": [
          "[{color: '${getColor}', context: {getColor: function(attr){return 'green';} }]"
        ]
      },
      {
        "key": "setDrawing",
        "description": "Defines drawing features on layers.\nPS: Function is available to the VectorLayer.\n@param enabled {Boolean} True to enable drawing, False otherwise.\n@param callbackOnAdd {function} Callback when a new feature is drew.\n  P.S.: You can use 'this' to access layer properties.\n  P.S.2: The callback function receives 2 parameters:\n         - vectorLayer: Current layer.\n         - drawEvent: The info of the added polygon.",
        "type": "function(enabled, callbackOnAdd)",
        "examples": [
          "this.setDrawing(false, function (vectorLayer, drawEvent) {})"
        ]
      },
      {
        "key": "styleMap",
        "description": "Customizes the layer visualization. \nPS: It is an advanced parameter, so it might be easier to use selectedStyle, defaultStyle and hoverStyle.\nPS2: The 'temporary' style is applied on hover event.",
        "type": "Object|OpenLayers.StyleMap",
        "examples": [
          "StyleMap{[default, select, temporary]: Style {rules:[Rule,], context: {getRadius: function() {return Math.random()}}}"
        ]
      }
    ],
    "XYZLayer": [
      {
        "key": "_information",
        "completeAPI": "View complete VectorLayer documentation <a href='/api/#category_XYZLayer'>API here</a>.",
        "description": "XYZ Layer configuration.",
        "name": "XYZ configuration"
      },
      {
        "key": "name",
        "description": "Defines a map identifier. This name should be unique.",
        "type": "String",
        "examples": [
          "[\n ...\n     {\n        source: \"xyz\",\n        name:\"XYZ:map_name\",\n     }\n ...\n]"
        ]
      },
      {
        "key": "source",
        "description": "Adds a layer to store the source.\n@param layerCfg {LayerConfig} Layer XYZ configuration.\nLayerConfig {\n  url: url,\n  name: name,\n  isBaseLayer: isBaseLayer,\n  sphericalMercator: sphericalMercator\n}",
        "type": "Object"
      },
      {
        "key": "url",
        "description": "Defines the url where the map can be fetched from. \nUse the ${x} ${y} ${z} as placeholder for x, y and z coordinates.",
        "type": "String",
        "examples": [
          "\"https://tiles.planet.com/basemaps/v1/planet-tiles/planet_medres_visual_2021-09_mosaic/gmap/${z}/${x}/${y}.png?api_key=b24ae87a99624d2cbd8ed6aeb9703280\""
        ]
      }
    ],
    "SourceConfig": [
      {
        "key": "_information",
        "description": "Layers sources configuration.",
        "name": "Source"
      },
      {
        "key": "onError",
        "description": "Defines callback function to be called when the store failes to be loaded.",
        "type": "function"
      },
      {
        "key": "onError",
        "description": "Defines callback function to be called when the store failes to be loaded.",
        "type": "function"
      },
      {
        "key": "onLoad",
        "description": "Defines callback function to be called when the store is successfully loaded.",
        "type": "function"
      },
      {
        "key": "onLoad",
        "description": "Defines callback function to be called when the store is successfully loaded.",
        "type": "function"
      }
    ]
  },
  "Helper Functions": {
    "_information": {
      "description": "Set of functions that help creating map interactions"
    },
    "LayerInternal": [
      {
        "key": "_information",
        "completeAPI": "View all layer internal helper functions <a href='/api/#category_LayerInternal'>API here</a>.",
        "description": "Functions to manipulate a composed map layers from inside, like what maps are composing or what legend will be applied.",
        "name": "Layer internal functions"
      },
      {
        "key": "changeLayers",
        "description": "Replaces an internal layer at a given index.\nPS: It's highly recommended to pass multiple configurations in an array, instead of calling this function multiple times in the same callback.\n@param newConfig {Array|Object} One or more layers configurations with a property 'index' indicating the replacing layer.\n Each config object must contain at least the following properties:\n  [{name: 'MAP_FULL_NAME', \n   styles: 'MAP_STYLE',\n   index: 'MAP_INDEX_TO_CHANGE'}, ... ]\n@param force {Boolean} Force redraw even if no change is done when the layer is the same.",
        "type": "function(newConfig, force)",
        "examples": [
          "{\n     name: \"CSR:rodovias,CSR:municipios\",\n     otherNames: \"CSR:roads\",\n     beforeCalc: function(layerVals, inputVals) {\n         this.changeLayers([{name: 'CSR:roads', styles: fMapName + \"_1\", index: 0}]);\n     }\n  }"
        ]
      },
      {
        "key": "changeLayers",
        "description": "Replaces an internal layer at a given index.\nPS: It's highly recommended to pass multiple configurations in an array, instead of calling this function multiple times in the same callback.\n@param newConfig {Array|Object} One or more layers configurations with a property 'index' indicating the replacing layer.\n Each config object must contain at least the following properties:\n  [{name: 'MAP_FULL_NAME', \n   styles: 'MAP_STYLE',\n   index: 'MAP_INDEX_TO_CHANGE'}, ... ]\n@param force {Boolean} Force redraw even if no change is done when the layer is the same.",
        "type": "function(newConfig, force)",
        "examples": [
          "{\n     name: \"CSR:rodovias,CSR:municipios\",\n     otherNames: \"CSR:roads\",\n     beforeCalc: function(layerVals, inputVals) {\n         this.changeLayers([{name: 'CSR:roads', styles: fMapName + \"_1\", index: 0}]);\n     }\n  }"
        ]
      },
      {
        "key": "otherNames",
        "description": "Defines additional maps to be available for the query, which will be listed in the filtered stored capabilities.\nEvery map included in layer definition needs to be either in 'name' property or 'otherNames' property.\n\nPS: This property must be used along with the 'capabilities' url option, which filters the 'GetCapabilities' response with only the maps included in layer definition. (Performance Optimization, faster loading).\nPS2: This property is only needed outside of the editor mode.",
        "type": "String",
        "examples": [
          "{\n     name: \"CSR:estados,CSR:airports\",\n     otherNames: \"CSR:municipios,CSR:rodovias\",\n     beforeCalc: function(layerVals, inputVals) {\n         this.changeLayers([{name: 'CSR:municipios', styles: fMapName + \"_1\", index: 0},\n             {name: 'CSR:rodovias', styles: 'rodovias_1', index: 1}]);\n     }\n  }\n\n  Function 'changeLayers' needs the definition of the 4 maps: 'estados', 'airports', 'municipios' and 'rodovias'. \n  If the 'otherNames' is not defined, only the maps defined at 'name' property will be available."
        ]
      },
      {
        "key": "otherNames",
        "description": "Defines additional maps to be available for the query, which will be listed in the filtered stored capabilities.\nEvery map included in layer definition needs to be either in 'name' property or 'otherNames' property.\n\nPS: This property must be used along with the 'capabilities' url option, which filters the 'GetCapabilities' response with only the maps included in layer definition. (Performance Optimization, faster loading).\nPS2: This property is only needed outside of the editor mode.",
        "type": "String",
        "examples": [
          "{\n     name: \"CSR:estados,CSR:airports\",\n     otherNames: \"CSR:municipios,CSR:rodovias\",\n     beforeCalc: function(layerVals, inputVals) {\n         this.changeLayers([{name: 'CSR:municipios', styles: fMapName + \"_1\", index: 0},\n             {name: 'CSR:rodovias', styles: 'rodovias_1', index: 1}]);\n     }\n  }\n\n  Function 'changeLayers' needs the definition of the 4 maps: 'estados', 'airports', 'municipios' and 'rodovias'. \n  If the 'otherNames' is not defined, only the maps defined at 'name' property will be available."
        ]
      }
    ],
    "TooltipHelper": [
      {
        "key": "CreateTooltipOnPosition",
        "description": "Create a tooltip at a fixed position.\n\nIf the position is the mouse event, the tooltip will be at the right side and below the pointer.\nIf the position is a array[x,y] will anchor the top left at this point.\n@param title {String} Tooltip title.\n@param contentHtml {String} Tooltip HTML content.\n@param position {Event|Array.<Number>} Defines the top left\nposition of the tooltip. Can be either a mouse event at or an\narray [x:Number, y:Number] with the cursor position.\n@param additionalConfig {Object} Additional configuration for the tooltip.",
        "type": "function(title, contentHtml, position, additionalConfig) : Ext.Tooltip",
        "returnDescription": "A tooltip anchored at the given position."
      },
      {
        "key": "CreateTooltipOnPosition",
        "description": "Create a tooltip at a fixed position.\n\nIf the position is the mouse event, the tooltip will be at the right side and below the pointer.\nIf the position is a array[x,y] will anchor the top left at this point.\n@param title {String} Tooltip title.\n@param contentHtml {String} Tooltip HTML content.\n@param position {Event|Array.<Number>} Defines the top left\nposition of the tooltip. Can be either a mouse event at or an\narray [x:Number, y:Number] with the cursor position.\n@param additionalConfig {Object} Additional configuration for the tooltip.",
        "type": "function(title, contentHtml, position, additionalConfig) : Ext.Tooltip",
        "returnDescription": "A tooltip anchored at the given position."
      },
      {
        "key": "_information",
        "completeAPI": "View the complete TooltipHelper <a href='/api/#category_TooltipHelper'>API here</a>.",
        "description": "Functions to create tooltips on elements, at fixed positions and at mouse events.\nUsage: ExtjsUtils.TooltipHelper",
        "name": "Tooltip helper"
      }
    ],
    "Extjs": [
      {
        "key": "_information",
        "completeAPI": "View the full <a target='_blank' href=\"https://docs.sencha.com/extjs/3.4.0\">Extjs API 3.4 click here</a>.\n*Only the functions which where used in CSR projects are listed <a href='/api/#category_Extjs'>here</a>.",
        "description": "Calling core Extjs functions allows fine control over the CSR Maps internal elements.",
        "name": "Extjs 3.4"
      },
      {
        "key": "escapeRegExp",
        "description": "Escape regular expression special characters from a string.\nEscape characters are '-', '[', ']', '/', '{', '}', '(', ')', '*', '+', '?', '.', '\\', '^', '$', '|'.\n@param str {String} Expression to be escaped",
        "type": "function(str) : String",
        "returnDescription": "String with all regex characters escaped"
      },
      {
        "key": "escapeRegExp",
        "description": "Escape regular expression special characters from a string.\nEscape characters are '-', '[', ']', '/', '{', '}', '(', ')', '*', '+', '?', '.', '\\', '^', '$', '|'.\n@param str {String} Expression to be escaped",
        "type": "function(str) : String",
        "returnDescription": "String with all regex characters escaped"
      },
      {
        "key": "getHighchartById",
        "description": "Gets the highchart by its DOM id.\n@param id {String} Id of the highchart.",
        "type": "function(id) : Object",
        "examples": [
          "Extjs.getHighchartById(\"highchart-01\");"
        ],
        "returnDescription": "Returns the highchart object."
      },
      {
        "key": "getHighchartById",
        "description": "Gets the highchart by its DOM id.\n@param id {String} Id of the highchart.",
        "type": "function(id) : Object",
        "examples": [
          "Extjs.getHighchartById(\"highchart-01\");"
        ],
        "returnDescription": "Returns the highchart object."
      }
    ],
    "Alertify": [
      {
        "key": "_information",
        "completeAPI": "View the complete Alertify <a href='/api/#category_Alertify'>API here</a>.",
        "description": "Functions to help showing dialog informations to users.",
        "name": "Alertify dialogs"
      },
      {
        "key": "alert",
        "description": "Shows an user non blocking alert.\n\nPS: If layer is loading only the last message will be shown after load end.\n@param msg {String} Notification HTML content.",
        "type": "function(msg)"
      },
      {
        "key": "alert",
        "description": "Shows an user non blocking alert.\n\nPS: If layer is loading only the last message will be shown after load end.\n@param msg {String} Notification HTML content.",
        "type": "function(msg)"
      },
      {
        "key": "log",
        "description": "Shows an user notification (if enabled).\n\nPS: The messages before layer loading are delayed, when it finishes only the last message will be shown.\n@param msg {String} The message that will be displayed in the alert. It can be in HTML format.\n@param config {Object} Configuration parameters for the message.\n {\n    force: {Boolean} Force to show notification even when disabled.\n    func: {Callback} Callback function when the notification is clicked.\n    onlyMsg: {Boolean} True to only show message and hide the close and the stop notifications, False otherwise.\n    delay: {Numeric} Amout of time in milisseconds before the message hide.\n    spamTime: {Numeric} Time the same message to be shown again is considered spam. (even with force = true).\n }",
        "type": "function(msg, config)"
      },
      {
        "key": "log",
        "description": "Shows an user notification (if enabled).\n\nPS: The messages before layer loading are delayed, when it finishes only the last message will be shown.\n@param msg {String} The message that will be displayed in the alert. It can be in HTML format.\n@param config {Object} Configuration parameters for the message.\n {\n    force: {Boolean} Force to show notification even when disabled.\n    func: {Callback} Callback function when the notification is clicked.\n    onlyMsg: {Boolean} True to only show message and hide the close and the stop notifications, False otherwise.\n    delay: {Numeric} Amout of time in milisseconds before the message hide.\n    spamTime: {Numeric} Time the same message to be shown again is considered spam. (even with force = true).\n }",
        "type": "function(msg, config)"
      }
    ],
    "QUERY": [
      {
        "key": "_information",
        "completeAPI": "View the complete Query <a href='/api/#category_QUERY'>API here</a>.",
        "description": "Defines a set of query helper functions.",
        "name": "Query utils"
      },
      {
        "key": "addLayer",
        "description": "Adds a layer from its definition.\n@param cfg {Object} Layer definition",
        "type": "function(cfg)"
      },
      {
        "key": "addLayer",
        "description": "Adds a layer from its definition.\n@param cfg {Object} Layer definition",
        "type": "function(cfg)"
      },
      {
        "key": "addRemoteWMSServer",
        "description": "Adds custom remote servers.\n@param wmsDefinitions {Object} A object with all custom WMS definitions.\n The object could contain the following properties:\n *url: {String} Url of the source (Mandatory).\n ?cors: {Boolean} True to accept (Cross Domain Request Security) CORS for servers without permission, False otherwise.\n ?updateWMS: {Boolean} True to purge the WMS cache and get the updated content, False otherwise. (Useful to avoid long waitings)\n ?storage: {String} Name of the storage service, supported services so far: 'github'.\n Storage type tips:\n     'github': The Github contenct directly.\n     'jsdelivr': The jsDelivr cache the results to force a instantly update the user could use different release version.\n         Tutorial about creating releases: https://help.github.com/en/articles/creating-releases\n         After creating the user could append @VERSION_NUMBER to the URL to force updating the map cache.\n@param QUERY_DESCRIPTION {ConfigLayer} Array Array of layers in the query.\nUsage: ExtjsUtils.QUERY.setQueryGlobalProperties({globalCount: 0}) && QUERY_DESCRIPTION",
        "type": "function(wmsDefinitions, QUERY_DESCRIPTION) : boolean",
        "returnDescription": "Usage:\rExtjsUtils.QUERY.addRemoteWMSServer({\r geoinfo: {\r  url: \"http://geoinfo.cnps.embrapa.br/geoserver/wms?SERVICE=WMS&\",\r  cors: true\r },\r ibge: {\r  url: \"https://geoservicos.ibge.gov.br/geoserver/CCAR/wms?\",\r  cors: true\r },\r gitHub: {\r   url: \"https://github.com/asfixia/CustomWMS@0.1\",\r   storage: \"github\",\r   updateWMS: true,\r   cors: true\r }\r})\r&&\rQUERY_DESCRIPTION\r\rPS:\r Storage types"
      },
      {
        "key": "addRemoteWMSServer",
        "description": "Adds custom remote servers.\n@param wmsDefinitions {Object} A object with all custom WMS definitions.\n The object could contain the following properties:\n *url: {String} Url of the source (Mandatory).\n ?cors: {Boolean} True to accept (Cross Domain Request Security) CORS for servers without permission, False otherwise.\n ?updateWMS: {Boolean} True to purge the WMS cache and get the updated content, False otherwise. (Useful to avoid long waitings)\n ?storage: {String} Name of the storage service, supported services so far: 'github'.\n Storage type tips:\n     'github': The Github contenct directly.\n     'jsdelivr': The jsDelivr cache the results to force a instantly update the user could use different release version.\n         Tutorial about creating releases: https://help.github.com/en/articles/creating-releases\n         After creating the user could append @VERSION_NUMBER to the URL to force updating the map cache.\n@param QUERY_DESCRIPTION {ConfigLayer} Array Array of layers in the query.\nUsage: ExtjsUtils.QUERY.setQueryGlobalProperties({globalCount: 0}) && QUERY_DESCRIPTION",
        "type": "function(wmsDefinitions, QUERY_DESCRIPTION) : boolean",
        "returnDescription": "Usage:\rExtjsUtils.QUERY.addRemoteWMSServer({\r geoinfo: {\r  url: \"http://geoinfo.cnps.embrapa.br/geoserver/wms?SERVICE=WMS&\",\r  cors: true\r },\r ibge: {\r  url: \"https://geoservicos.ibge.gov.br/geoserver/CCAR/wms?\",\r  cors: true\r },\r gitHub: {\r   url: \"https://github.com/asfixia/CustomWMS@0.1\",\r   storage: \"github\",\r   updateWMS: true,\r   cors: true\r }\r})\r&&\rQUERY_DESCRIPTION\r\rPS:\r Storage types"
      },
      {
        "key": "decorate",
        "description": "Defines custom 'CSS' properties to decorate the page, allowing to add headers and footers, change the top bar color, and other settings.\n@param pageProperties {Object} Object with the custom properties to customize the page.",
        "type": "function(pageProperties)"
      },
      {
        "key": "decorate",
        "description": "Defines custom 'CSS' properties to decorate the page, allowing to add headers and footers, change the top bar color, and other settings.\n@param pageProperties {Object} Object with the custom properties to customize the page.",
        "type": "function(pageProperties)"
      },
      {
        "key": "runNow",
        "description": "Defines functions to be called before layer definition, inside 'QUERY.setQueryGlobalProperties'.",
        "type": "function()",
        "examples": [
          "ExtjsUtils.QUERY.setQueryGlobalProperties({\n runNow: function(){...}\n }) && QUERY_DESCRIPTION"
        ]
      },
      {
        "key": "runNow",
        "description": "Defines functions to be called before layer definition, inside 'QUERY.setQueryGlobalProperties'.",
        "type": "function()",
        "examples": [
          "ExtjsUtils.QUERY.setQueryGlobalProperties({\n runNow: function(){...}\n }) && QUERY_DESCRIPTION"
        ]
      },
      {
        "key": "runOnceLayerVisible",
        "description": "Defines a function that is called after the specified layer is rendered. If the layer is already visible, the function is executed immediately. \nPS: This is used inside of layer callback functions.\n@param layer {OpenLayers.Layer} Layer that has to be rendered.\n@param callback {function} Function to be called.",
        "type": "function(layer, callback)",
        "examples": [
          "runOnceLayerVisible: function (layer, callback) {}"
        ]
      },
      {
        "key": "runOnceLayerVisible",
        "description": "Defines a function that is called after the specified layer is rendered. If the layer is already visible, the function is executed immediately. \nPS: This is used inside of layer callback functions.\n@param layer {OpenLayers.Layer} Layer that has to be rendered.\n@param callback {function} Function to be called.",
        "type": "function(layer, callback)",
        "examples": [
          "runOnceLayerVisible: function (layer, callback) {}"
        ]
      },
      {
        "key": "setMappiaIoCallback",
        "description": "Defines a function that receives a message from the parent window, allowing communication between the Mappia/iframe and the parent window. (Compatible with MappiaIO library)\nThe 'QUERY.postMessage' is responsible for sending message.\n@param onMsgCallback {function} Callback that will receive the param passed on 'MappiaIO.postMessage'.\n         - jsStr {Object|String} Received param from parent window to Mappia/iframe.",
        "type": "function(onMsgCallback)",
        "examples": [
          "ExtjsUtils.QUERY.setMappiaIoCallback(function onMsgCallback(jsStr) {})"
        ]
      },
      {
        "key": "setMappiaIoCallback",
        "description": "Defines a function that receives a message from the parent window, allowing communication between the Mappia/iframe and the parent window. (Compatible with MappiaIO library)\nThe 'QUERY.postMessage' is responsible for sending message.\n@param onMsgCallback {function} Callback that will receive the param passed on 'MappiaIO.postMessage'.\n         - jsStr {Object|String} Received param from parent window to Mappia/iframe.",
        "type": "function(onMsgCallback)",
        "examples": [
          "ExtjsUtils.QUERY.setMappiaIoCallback(function onMsgCallback(jsStr) {})"
        ]
      },
      {
        "key": "setQueryGlobalProperties",
        "description": "Allows to define custom global functions that can be used to define properties.\nPS: All properties defined here are added to the global scope and are removed when the query is changed.\nPS2: QUERY_DESCRIPTION is the definition of layers in the query used immediately after the function.\n@param globalProperties {Object} The object that all his functions will become globals, each property can be a value or a object or even a function.",
        "type": "function(globalProperties) : Boolean",
        "examples": [
          "ExtjsUtils.QUERY.setQueryGlobalProperties({globalCount: 0}) && QUERY_DESCRIPTION"
        ],
        "returnDescription": "Returns True to be defined with '&&' allowing the evaluation of layers definitions."
      },
      {
        "key": "setQueryGlobalProperties",
        "description": "Allows to define custom global functions that can be used to define properties.\nPS: All properties defined here are added to the global scope and are removed when the query is changed.\nPS2: QUERY_DESCRIPTION is the definition of layers in the query used immediately after the function.\n@param globalProperties {Object} The object that all his functions will become globals, each property can be a value or a object or even a function.",
        "type": "function(globalProperties) : Boolean",
        "examples": [
          "ExtjsUtils.QUERY.setQueryGlobalProperties({globalCount: 0}) && QUERY_DESCRIPTION"
        ],
        "returnDescription": "Returns True to be defined with '&&' allowing the evaluation of layers definitions."
      }
    ],
    "GEOJSON": [
      {
        "key": "_information",
        "description": "Functions to handle GEOJSON transformations.",
        "name": "GEOJSON Utils"
      },
      {
        "key": "shapefile2GeojsonAsync",
        "description": "Parse shapefile to compatible Layer features.\nDBF file is optional.\n\nPS:ParamOptions\n  {\n  callback: {Function} 'Callback function with parsed shapefile' function(layer, parsedGeojson, originalData),\n  fromProj: {String?} 'Projection name.' (EPSG:4326 or EPSG:900913),\n  dbf: (Optional?)'DBF file to load along with shapefile.',\n  limitCount: (Optional?)'Limit the amount of processed geometries'\n  }\n@param shpFile {File} Shapefile content (Needs to be in projection EPSG:4326 or EPSG:900913.\n@param paramOptions {ParamOptions} Additional configuration for handling shapefile.\nParamOptions\n  {\n  callback: {Function} 'Callback function with parsed shapefile' function(layer, parsedGeojson, originalData),\n  fromProj: {String?} 'Projection name.' (EPSG:4326 or EPSG:900913),\n  dbf: (Optional?)'DBF file to load along with shapefile.',\n  limitCount: (Optional?)'Limit the amount of processed geometries'\n  }",
        "type": "function(shpFile, paramOptions)"
      },
      {
        "key": "shapefile2GeojsonAsync",
        "description": "Parse shapefile to compatible Layer features.\nDBF file is optional.\n\nPS:ParamOptions\n  {\n  callback: {Function} 'Callback function with parsed shapefile' function(layer, parsedGeojson, originalData),\n  fromProj: {String?} 'Projection name.' (EPSG:4326 or EPSG:900913),\n  dbf: (Optional?)'DBF file to load along with shapefile.',\n  limitCount: (Optional?)'Limit the amount of processed geometries'\n  }\n@param shpFile {File} Shapefile content (Needs to be in projection EPSG:4326 or EPSG:900913.\n@param paramOptions {ParamOptions} Additional configuration for handling shapefile.\nParamOptions\n  {\n  callback: {Function} 'Callback function with parsed shapefile' function(layer, parsedGeojson, originalData),\n  fromProj: {String?} 'Projection name.' (EPSG:4326 or EPSG:900913),\n  dbf: (Optional?)'DBF file to load along with shapefile.',\n  limitCount: (Optional?)'Limit the amount of processed geometries'\n  }",
        "type": "function(shpFile, paramOptions)"
      }
    ],
    "ZOOM": [
      {
        "key": "_information",
        "completeAPI": "",
        "description": "Functions to control zoom.",
        "name": "Zoom"
      },
      {
        "key": "limitZoomLevel",
        "description": "Sets the maximum zoom level.",
        "type": "function()",
        "examples": [
          "ExtjsUtils.ZOOM.limitZoomLevel(ZOOM_MAX_LVL: integer);"
        ]
      },
      {
        "key": "limitZoomLevel",
        "description": "Sets the maximum zoom level.",
        "type": "function()",
        "examples": [
          "ExtjsUtils.ZOOM.limitZoomLevel(ZOOM_MAX_LVL: integer);"
        ]
      }
    ],
    "Layer": [
      {
        "key": "_information",
        "description": "Layer information helper functions.",
        "name": "Layer"
      },
      {
        "key": "getLayersRecord",
        "description": "Gets the store layer information from its full name.\n\nPS: The parameter must be the full layer name, such as: 'CSR:estados' or 'CSR:altimetria'.\n@param layerName {String} Optional Full layer name to look for, otherwise it will return all records.\n@param storeName {String} Optional Name to search only in specific sources for the 'layerName' (fill it to prevent from searching in all stores).",
        "type": "function(layerName, storeName) : Array.<Ext.data.Record>|Ext.data.Record|Null",
        "examples": [
          "Layer.getLayersRecord(\"CSR:estados\");"
        ],
        "returnDescription": "When the layer is specified, it returns the data about this layer, otherwise it returns the array of all layers that match the parameters."
      },
      {
        "key": "getLayersRecord",
        "description": "Gets the store layer information from its full name.\n\nPS: The parameter must be the full layer name, such as: 'CSR:estados' or 'CSR:altimetria'.\n@param layerName {String} Optional Full layer name to look for, otherwise it will return all records.\n@param storeName {String} Optional Name to search only in specific sources for the 'layerName' (fill it to prevent from searching in all stores).",
        "type": "function(layerName, storeName) : Array.<Ext.data.Record>|Ext.data.Record|Null",
        "examples": [
          "Layer.getLayersRecord(\"CSR:estados\");"
        ],
        "returnDescription": "When the layer is specified, it returns the data about this layer, otherwise it returns the array of all layers that match the parameters."
      },
      {
        "key": "isOnHover",
        "description": "Informs if the mouse is over the current layer.\n@param layer {Layer|Composer} Layer to check if the mouse is over.\n@param mouseEvt {Event} The mouse event.",
        "type": "function(layer, mouseEvt) : Boolean",
        "returnDescription": "Returns true if the mouse is over the 'layer', False otherwise."
      },
      {
        "key": "isOnHover",
        "description": "Informs if the mouse is over the current layer.\n@param layer {Layer|Composer} Layer to check if the mouse is over.\n@param mouseEvt {Event} The mouse event.",
        "type": "function(layer, mouseEvt) : Boolean",
        "returnDescription": "Returns true if the mouse is over the 'layer', False otherwise."
      }
    ],
    "Number": [
      {
        "key": "_information",
        "description": "Functions to manipulate and format numbers.",
        "name": "Number"
      },
      {
        "key": "abbreviateNumber",
        "description": "Auxiliary function to shorten the display of numbers.\n\nPS: The number loses a little precision but becomes more meaningful.\n@param value {Number} Value to be displayed.\n@param useFixed {Number} If set it will limit the number of decimal places, otherwise it will use the default value.\n@param abbreviateNumbers {Array.<Number>} Number suffix name.",
        "type": "function(value, useFixed, abbreviateNumbers) : Number|String",
        "returnDescription": "Simplified value to be displayed. Can return a number or a string."
      },
      {
        "key": "abbreviateNumber",
        "description": "Auxiliary function to shorten the display of numbers.\n\nPS: The number loses a little precision but becomes more meaningful.\n@param value {Number} Value to be displayed.\n@param useFixed {Number} If set it will limit the number of decimal places, otherwise it will use the default value.\n@param abbreviateNumbers {Array.<Number>} Number suffix name.",
        "type": "function(value, useFixed, abbreviateNumbers) : Number|String",
        "returnDescription": "Simplified value to be displayed. Can return a number or a string."
      }
    ],
    "Request": [
      {
        "key": "_information",
        "description": "Helper functions to deal with HTTP requests.",
        "name": "Request"
      },
      {
        "key": "isLocalUrl",
        "description": "Identify if the 'url' is from the localhost or is from the maps.csr.ufmg.br domain.\n\nPS: If url is left blank it uses the current site url.\n@param url {String} String with the url to be checked.",
        "type": "function(url) : Boolean",
        "examples": [
          "ExtjsUtils.REQUEST.isLocalUrl() // true",
          "ExtjsUtils.REQUEST.isLocalUrl(\"www.google.com\") // false"
        ],
        "returnDescription": "Returns true if the url is from localhost, otherwise it returns false."
      },
      {
        "key": "isLocalUrl",
        "description": "Identify if the 'url' is from the localhost or is from the maps.csr.ufmg.br domain.\n\nPS: If url is left blank it uses the current site url.\n@param url {String} String with the url to be checked.",
        "type": "function(url) : Boolean",
        "examples": [
          "ExtjsUtils.REQUEST.isLocalUrl() // true",
          "ExtjsUtils.REQUEST.isLocalUrl(\"www.google.com\") // false"
        ],
        "returnDescription": "Returns true if the url is from localhost, otherwise it returns false."
      }
    ],
    "MappiaIO": [
      {
        "key": "_information",
        "completeAPI": "Library to send events between Mappia Iframe and your site.\nIt allows to send events, like: on scroll change visible maps, or click on some links zoom to some region, and any other interaction with the events of your site. Use this library in your site include <a target='_blank' href='http://maps.csr.ufmg.br/theme/app/data/mappia_io.js'>&lt;script type=\"text/javascript\" src=\"//csr.ufmg.br/imagery/mappia_io.js\"&gt;&lt;/script&gt;</a>.",
        "description": "Library to send events between Mappia Iframe and your site.",
        "name": "MappiaIO"
      },
      {
        "key": "postMessage",
        "description": "Sends a message to the Mappia/iframe, allowing communication between the Mappia/iframe and the parent window. (Compatible with MappiaIO library)\nThe 'QUERY.setMappiaIoCallback' is responsible to interpret the sent message.\n@param jsStr {Object|String} Object to be sent from inside Mappia/iframe to parent window.",
        "type": "function(jsStr)",
        "examples": [
          "ExtjsUtils.QUERY.postMessage({a:1,b:2})"
        ]
      },
      {
        "key": "postMessage",
        "description": "Sends a message to the Mappia/iframe, allowing communication between the Mappia/iframe and the parent window. (Compatible with MappiaIO library)\nThe 'QUERY.setMappiaIoCallback' is responsible to interpret the sent message.\n@param jsStr {Object|String} Object to be sent from inside Mappia/iframe to parent window.",
        "type": "function(jsStr)",
        "examples": [
          "ExtjsUtils.QUERY.postMessage({a:1,b:2})"
        ]
      }
    ],
    "AsyncLoader": [
      {
        "key": "_information",
        "completeAPI": "",
        "description": "Load one or more external resources by its URL and call a callback function when it finishes.\narray: {Array} A array of resource urls to load.\ncallback: Function that will be called when the load ends.\nUsage: AsyncLoader.loadScriptOnce({Array}, {Function}}",
        "name": "Asynchronous resource loader"
      }
    ]
  },
  "External Libraries": {
    "_information": {
      "description": "External libraries that may be useful for creating data visualisation"
    },
    "Highcharts": [
      {
        "key": "_information",
        "completeAPI": "Highcharts JS has a complete set of examples and a nice documentation that can be <a target='_blank' href='https://www.highcharts.com/demo'>accessed here</a>.",
        "description": "Highcharts is a library used to easly create interactive charts.\nUsage: (Highcharts.chart(DOM_ID, {});)",
        "name": "Highcharts library"
      }
    ],
    "Sankey": [
      {
        "key": "_information",
        "description": "Soon.",
        "name": "Sankey transitions chart"
      }
    ]
  }
}